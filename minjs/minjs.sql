-- Adminer 3.3.4 MySQL dump

SET NAMES utf8;
SET foreign_key_checks = 0;
SET time_zone = 'SYSTEM';
SET sql_mode = 'NO_AUTO_VALUE_ON_ZERO';

DROP TABLE IF EXISTS `controllers`;
CREATE TABLE `controllers` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '',
  `data` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `controllers` (`id`, `name`, `data`) VALUES
(1,	'browser',	'minjs.browser=new new Class(\r\n{ Extends: minjs.Controller,\r\n  \r\n  start: function(parameters,data)\r\n  { minjs.browserState = {};\r\n    minjs.browserState.loginQuery = parameters.login;\r\n    minjs.browserState.homeQuery = parameters.home;\r\n    window.addEvent(\'hashchange\', this.address.bind(this));\r\n    this.home();\r\n    this.updateAddressBar(parameters.home);\r\n  },\r\n  \r\n  home: function(parameters,data)\r\n  { if (this.browser.user()>0) minjs.go(minjs.browserState.homeQuery);\r\n    else minjs.go(minjs.browserState.loginQuery);\r\n  },\r\n  \r\n  address: function()\r\n  { var address = String.from(window.location.href);\r\n    address = address.substr(address.indexOf(\'#\')+1)\r\n    try\r\n    { address = decodeURI(address);\r\n    }\r\n    catch(e)\r\n    { //ignore decode error\r\n    }\r\n    var query = this.getQuery(address);\r\n    var params = this.getParameters(address);\r\n    if (address!=minjs.browserState.addressBarText)\r\n    { minjs.go(query,params);\r\n    }\r\n  },\r\n  \r\n  back: function(parameters,data)\r\n  { history.go(-1);\r\n  },\r\n  \r\n  updateAddressBar: function()\r\n  { document.location.href=\'#\'+encodeURI(minjs.browserState.addressBarText);\r\n  },\r\n  \r\n  go: function(query,params,data)\r\n  { if (query.split(\'.\')[0]!=\'browser\')\r\n    { if (minjs.browserState.currentQuery!=query || JSON.encode(minjs.browserState.currentParams)!=JSON.encode(params))\r\n      { minjs.browserState.previousQuery = minjs.browserState.currentQuery;\r\n        minjs.browserState.previousParams = minjs.browserState.currentParams;\r\n        minjs.browserState.currentQuery = query;\r\n        minjs.browserState.currentParams = params;\r\n      }\r\n      var str = query;\r\n      if (params && Object.getLength(params)) str+=\'(\'+JSON.encode(params)+\')\';\r\n      minjs.browserState.addressBarText = str;\r\n    }\r\n  },\r\n  \r\n  referrer: function(parameters,data)\r\n  { minjs.go(minjs.browserState.previousQuery,minjs.browserState.previousParams);\r\n  }\r\n\r\n});\r\n'),
(2,	'controllers',	'minjs.controllers=new new Class(\n{ Extends: minjs.Controller,\n  \n  list: function(parameters,data)\n  { data = this.controller.list();\n    this.render(\'controllers/list\',data);\n  },\n  \n  show: function(parameters,data)\n  { data = this.controller.read(parameters.name);\n    this.render(\'controllers/show\',data);\n  },\n  \n  edit: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.controller.write(data))\n      { return this.error(\'controller could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'controller saved\');\n    }\n    else\n    { data = this.controller.read(parameters.name);\n      this.render(\'controllers/edit\',data);\n    }\n  },\n  \n  remove: function(parameters,data)\n  { if (!this.controller.remove(parameters.name))\n    { return this.error(\'controller could not be removed\');\n    }\n    minjs.go(\'browser.referrer\');\n    this.flash(\'success\',\'controller removed\');\n  },\n  \n  add: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.controller.write(data))\n      { return this.error(\'controller could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'controller saved\');\n    }\n    else\n    { var name = parameters.name;\n      var controller = {name: name};\n      data = {controller: name, model: name.singularize()};\n      controller.data = this.renderTemplate(false,\'skel/controller\',data).html;\n      this.render(\'controllers/edit\',{controller:controller});\n    }    \n  }\n  \n});\n'),
(3,	'models',	'minjs.models=new new Class(\n{ Extends: minjs.Controller,\n  \n  list: function(parameters,data)\n  { data = this.model.list();\n    this.render(\'models/list\',data);\n  },\n  \n  show: function(parameters,data)\n  { data = this.model.read(parameters.name);\n    this.render(\'models/show\',data);\n  },\n  \n  edit: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.model.write(data))\n      { return this.error(\'model could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'model saved\');\n    }\n    else\n    { data = this.model.read(parameters.name);\n      this.render(\'models/edit\',data);\n    }\n  },\n  \n  remove: function(parameters,data)\n  { if (!this.model.remove(parameters.name))\n    { return this.error(\'model could not be removed\');\n    }\n    minjs.go(\'browser.referrer\');\n    this.flash(\'success\',\'model removed\');\n  },\n  \n  add: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.model.write(data))\n      { return this.error(\'model could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'model saved\');\n    }\n    else\n    { var name = parameters.name;\n      var model = {name: name};\n      var controller = name.pluralize();\n      var relations = minjs.inflector.relations(controller);\n      data = {controller: controller,model: name, relations: relations};\n      model.data = this.renderTemplate(false,\'skel/model\',data).html;\n      this.render(\'models/edit\',{model:model});\n    }    \n  }\n  \n});\n'),
(4,	'queries',	'minjs.queries=new new Class(\n{ Extends: minjs.Controller,\n  \n  generate: function(parameters,data)\n  { if (!parameters.name) this.query.generateAll();\n    else\n    { if (parameters.name.indexOf(\'.\')==-1)\n      { this.query.generateTable(parameters.name);\n      }\n      else this.query.generateQuery(parameters.name);\n    }\n    minjs.go(\'browser.referrer\');\n    this.flash(\'success\',\'queries generated\');\n  },\n  \n  demo: function(parameters,data)\n  { if (data!==undefined)\n    { var cmds = data.query.input.trim().split(new RegExp(\"^minjs\\\\.quer|\\\\nminjs\\\\.quer\"));\n      for (var i=0;i<cmds.length;i++) \n      { try \n        { var s = \'this.query.quer\'+cmds[i];\n          cmds[i]=JSON.encode(eval(s));\n        }\n        catch (e)\n        { cmds[i]=e;\n        }\n      }\n      data.query.output = cmds.join(\"\\n\").trim();\n    }\n    else\n    { data = {query: {}};\n      data.query.input = \"minjs.query(\'success\',\'users.login\',{username:\\\"admin\\\",password:\\\"admin\\\"});\\n\";\n      data.query.input+= \"minjs.query(\'list\',\'groups.list\');\\n\";\n      data.query.input+= \"minjs.queries([\\n\";\n      data.query.input+= \"  [\'add\',\'record\',\'users.add\',{username:\\\"test\\\",password:\\\"test\\\"}],\\n\";\n      data.query.input+= \"  [\'remove\',\'record\',\'users.remove\',{},{id:\\\"add.insert_id\\\"}]\\n\";\n      data.query.input+= \"]);\\n\";\n      data.query.output = \'\';\n    }\n    this.render(\'queries/demo\',data);\n  },\n  \n  check: function(parameters,data)\n  { var tables = this.query.check();\n    this.render(\'queries/check\',{tables:tables});\n  },\n  \n  add: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.query.write(data))\n      { return this.error(\'query could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'query saved\');\n    }\n    else\n    { var data = {query:{name:\'\',text:\'\',documentation:\'\'}};\n      this.render(\'queries/add\',data);\n    }\n  },\n  \n  show: function(parameters,data)\n  { var data = this.query.read(parameters.id);\n    this.render(\'queries/show\',data);\n  },\n  \n  edit: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.query.write(data))\n      { return this.error(\'query could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'query saved\');\n    }\n    else\n    { var data = this.query.read(parameters.id);\n      this.render(\'queries/edit\',data);\n    }\n  },\n  \n  remove: function(parameters,data)\n  { if (!this.query.remove(parameters.id))\n    { return this.error(\'query could not be removed\');\n    }\n    minjs.go(\'browser.referrer\');\n    this.flash(\'success\',\'query removed\');\n  },\n  \n  list: function(parameters,data)\n  { if (!parameters.limit) parameters.limit=10;\n    var data = this.query.list(parameters);\n    data.parameters = parameters;\n    this.render(\'queries/list\',data);\n  }\n  \n});\n'),
(5,	'roles',	'minjs.roles=new new Class(\n{ Extends: minjs.Controller,\n  \n  add: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.role.write(data))\n      { return this.error(\'role could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'role saved\');\n    }\n    else\n    { var data = this.role.read();\n      this.render(\'roles/add\',data);\n    }\n  },\n  \n  show: function(parameters,data)\n  { var data = this.role.read(parameters.id);\n    this.render(\'roles/show\',data);\n  },\n  \n  edit: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.role.write(data))\n      { return this.error(\'role could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'role saved\');\n    }\n    else\n    { var data = this.role.read(parameters.id);\n      this.render(\'roles/edit\',data);\n    }\n  },\n  \n  remove: function(parameters,data)\n  { if (!this.role.remove(parameters.id))\n    { return this.error(\'role could not be removed\');\n    }\n    minjs.go(\'browser.referrer\');\n    this.flash(\'success\',\'role removed\');\n  },\n  \n  list: function(parameters,data)\n  { var data = this.role.list();\n    this.render(\'roles/list\',data);\n  }\n\n});\n'),
(6,	'roles_queries',	'minjs.roles_queries=new new Class(\n{ Extends: minjs.Controller,\n  \n  add: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.roles_query.write(data))\n      { return this.error(\'roles_query could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'roles_query saved\');\n    }\n    else\n    { var data = this.roles_query.read();\n      this.render(\'roles_queries/add\',data);\n    }\n  },\n  \n  show: function(parameters,data)\n  { var data = this.roles_query.read(parameters.id);\n    this.render(\'roles_queries/show\',data);\n  },\n  \n  edit: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.roles_query.write(data))\n      { return this.error(\'roles_query could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'roles_query saved\');\n    }\n    else\n    { var data = this.roles_query.read(parameters.id);\n      this.render(\'roles_queries/edit\',data);\n    }\n  },\n  \n  remove: function(parameters,data)\n  { if (!this.roles_query.remove(parameters.id))\n    { return this.error(\'roles_query could not be removed\');\n    }\n    minjs.go(\'browser.referrer\');\n    this.flash(\'success\',\'roles_query removed\');\n  },\n  \n  list: function(parameters,data)\n  { var data = this.roles_query.list();\n    this.render(\'roles_queries/list\',data);\n  }\n\n});\n'),
(7,	'users',	'minjs.users=new new Class(\n{ Extends: minjs.Controller,\n  \n  add: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.user.write(data))\n      { return this.error(\'user could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'user saved\');\n    }\n    else\n    { data = this.user.read();\n      this.render(\'users/add\',data);\n    }\n  },\n  \n  show: function(parameters,data)\n  { data = this.user.read(parameters.id);\n    this.render(\'users/show\',data);\n  },\n  \n  edit: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.user.write(data))\n      { return this.error(\'user could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'user saved\');\n    }\n    else\n    { data = this.user.read(parameters.id);\n      this.render(\'users/edit\',data);\n    }\n  },\n  \n  remove: function(parameters,data)\n  { if (!this.user.remove(parameters.id))\n    { return this.error(\'user could not be removed\');\n    }\n    minjs.go(\'browser.referrer\');\n    this.flash(\'success\',\'user removed\');\n  },\n  \n  list: function(parameters,data)\n  { data = this.user.list();\n    this.render(\'users/list\',data);\n  },\n  \n  home: function(parameters,data)\n  { this.render(\'users/home\');\n  },\n  \n  login: function(parameters,data)\n  { if (data!==undefined) \n    { if (!this.user.login(data))\n      { return this.error(\'login failed\',this.user.errors);\n      }\n      minjs.go(\'users.home\');\n      this.flash(\'success\',\'user logged in\');\n    }\n    else this.render(\'users/login\',{username:\'admin\',password:\'admin\'});\n  },\n\n  logout: function(parameters,data)\n  { this.user.login({username:\'nobody\',password:\'nobody\'});\n    minjs.go(\'users.login\');\n    this.flash(\'success\',\'user logged out\');\n  },\n\n  password: function(parameters,data)\n  { if (data!==undefined) \n    { if (!this.user.password(data))\n      { return this.error(\'password not changed\',this.user.errors);\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'password changed\');\n    }\n    else\n    { this.render(\'users/password\');\n    }\n  }\n  \n});\n'),
(13,	'views',	'minjs.views=new new Class(\n{ Extends: minjs.Controller,\n  \n  check: function(parameters,data)\n  { var tables = this.view.check();\n    this.render(\'views/check\',{tables:tables});\n  },\n  \n  list: function(parameters,data)\n  { data = this.view.list(parameters.name);\n    this.render(\'views/list\',data);\n  },\n  \n  show: function(parameters,data)\n  { data = this.view.read(parameters.name);\n    this.render(\'views/show\',data);\n  },\n  \n  edit: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.view.write(data))\n      { return this.error(\'view could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'view saved\');\n    }\n    else\n    { data = this.view.read(parameters.name);\n      this.render(\'views/edit\',data);\n    }\n  },\n  \n  remove: function(parameters,data)\n  { if (!this.view.remove(parameters.name))\n    { return this.error(\'view could not be removed\');\n    }\n    minjs.go(\'browser.referrer\');\n    this.flash(\'success\',\'view removed\');\n  },\n    \n  add: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.view.write(data))\n      { return this.error(\'view could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'view saved\');\n    }\n    else\n    { var name = parameters.name;\n      var controller = name.split(\'/\')[0];\n      var action = name.split(\'/\')[1];\n      var model = controller.singularize();\n      var view = {name: name};\n      var relations = minjs.inflector.relations(controller);\n      var fields = minjs.inflector.fields(controller,relations);\n      data = {controller:controller,model:model,fields:fields,relations:relations};\n      view.html = this.renderTemplate(false,\'skel/views/\'+action,data).html;\n      view.css = \'\';\n      this.render(\'views/edit\',{view:view});\n    }    \n  }\n  \n});\n'),
(14,	'pages',	'minjs.pages=new new Class(\n{ Extends: minjs.Controller,\n  \n  add: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.page.write(data))\n      { return this.error(\'page could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'page saved\');\n    }\n    else\n    { var data = this.page.read();\n      this.render(\'pages/add\',data);\n    }\n  },\n  \n  show: function(parameters,data)\n  { var data = this.page.read(parameters.id);\n    this.render(\'pages/show\',data);\n  },\n  \n  edit: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.page.write(data))\n      { return this.error(\'page could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'page saved\');\n    }\n    else\n    { var data = this.page.read(parameters.id);\n      this.render(\'pages/edit\',data);\n    }\n  },\n  \n  remove: function(parameters,data)\n  { if (!this.page.remove(parameters.id))\n    { return this.error(\'page could not be removed\');\n    }\n    minjs.go(\'browser.referrer\');\n    this.flash(\'success\',\'page removed\');\n  },\n  \n  list: function(parameters,data)\n  { var data = this.page.list();\n    this.render(\'pages/list\',data);\n  }\n\n});');

DROP TABLE IF EXISTS `groups`;
CREATE TABLE `groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `groups` (`id`, `name`) VALUES
(1,	'company1'),
(2,	'company2');

DROP TABLE IF EXISTS `models`;
CREATE TABLE `models` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '',
  `data` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `models` (`id`, `name`, `data`) VALUES
(1,	'browser',	'minjs.browser.browser=new new Class(\n{ Extends: minjs.Model,\n  \n  user: function()\n  { return this.query(\'value:user_id\',\'users.whoami\');\n  }\n  \n});'),
(4,	'query',	'minjs.queries.query=new new Class(\n{ Extends: minjs.Model,\n\n  check: function()\n  { var data = this.queries([\n      [\'tables\',\'values:TABLE_NAME\',\'inflector.tables\'],\n      [\'models\',\'values:name\',\'models.list\']\n    ]);\n    data.queries = [];\n    for (var t=0;t<data.tables.length;t++)\n    { data.queries.push(data.tables[t]);\n    }\n    for (var t=0;t<data.models.length;t++)\n    { var table = data.models[t].pluralize();\n      if (!data.queries.contains(table)) data.queries.push(table);\n    }\n    data.queries.push(\'inflector\');\n    var queries = [];\n    for (var t=0;t<data.queries.length;t++)\n    { queries.push([data.queries[t],\'list\',\'queries.list\',{name:data.queries[t]+\'.%\'}]);\n    }\n    queries = this.queries(queries);\n    for (var t=0;t<data.queries.length;t++)\n    { var table = data.queries[t];\n      var crud = [\'add\',\'read\',\'write\',\'remove\',\'list\'];\n      var missing = [];\n      if (data.tables.contains(table))\n      { for (var i=0;i<crud.length;i++) \n        { var queryName = table+\'.\'+crud[i];\n          if (!Object.contains(queries[table], queryName))\n          { missing.push(crud[i]);\n          }\n        }\n      }\n      data.queries[t] = {name:data.queries[t],count:Object.getLength(queries[table]),missing:missing};\n    }\n    return data.queries;\n  },\n\n  generateAll: function()\n  { var tables = this.query(\'values:TABLE_NAME\',\'inflector.tables\');\n    for (var t=0;t<tables.length;t++)\n    { this.generateTable(tables[t]);\n    }\n  },\n\n  generateTable: function(table)\n  { var data = this.queries([\n      [\'queries\',\'list\',\'queries.list\',{name:table+\'.%\'}],\n      [\'fields\',\'records\',\'inflector.fields\',{table_name:table}]\n    ]);\n    var crud = [\'add\',\'read\',\'write\',\'remove\',\'list\'];\n    for (var i=0;i<crud.length;i++) \n    { var queryName = table+\'.\'+crud[i];\n      if (!Object.contains(data.queries, queryName))\n      { this.write(this.generate(queryName,data.fields));\n      }\n    }\n  },\n\n  generateQuery: function(queryName)\n  { var table = queryName.split(\'.\')[0];\n    var fields = this.query(\'records\',\'inflector.fields\',{table_name:table});\n    this.write(this.generate(queryName,fields));\n  },\n  \n  generate: function(queryName,fields)\n  { var data = {};\n    data.query = {};\n    data.query.name = queryName;\n    var type = queryName.split(\'.\')[1];\n    data.query.documentation = \'Generated \'+type+\' query\';\n    switch (type)\n    { case \'add\': this.generateAdd(data,fields); break;\n      case \'read\': this.generateRead(data,fields); break;\n      case \'write\': this.generateWrite(data,fields); break;\n      case \'list\': this.generateList(data,fields); break;\n      case \'remove\': this.generateRemove(data,fields); break;\n    }\n    return data;\n  },\n  \n  generateFields: function(table,fields)\n  { var fs = \'\';\n    for (var i=0;i<fields.length;i++)\n    { var f = fields[i];\n      if (f.COLUMN_NAME==\'id\') continue;\n      if ((table.indexOf(\"users\")==-1 && f.COLUMN_NAME==\'user_id\') ||\n          (table.indexOf(\"groups\")==-1 && f.COLUMN_NAME==\'group_id\'))\n      { fs+=\', `\'+f.COLUMN_NAME+\'`=::\'+f.COLUMN_NAME;\n      }\n      else fs+=\', `\'+f.COLUMN_NAME+\'`=:\'+f.COLUMN_NAME;\n    }\n    if (fs.length>2) fs=fs.substr(2);\n    return fs;\n  },\n  \n  generateWhere: function(table,fields,id)\n  { var fs = \'\';\n    for (var i=0;i<fields.length;i++)\n    { var f = fields[i];\n      if (f.COLUMN_NAME==\'id\' && !id) continue;\n      if ((table.indexOf(\"users\")==-1 && f.COLUMN_NAME==\'user_id\') ||\n          (table.indexOf(\"groups\")==-1 && f.COLUMN_NAME==\'group_id\'))\n      { fs+=\' and `\'+f.COLUMN_NAME+\'`=::\'+f.COLUMN_NAME;\n      }\n      else if ((f.COLUMN_NAME==\'id\' && id) || !id) \n      { fs+=\' and `\'+f.COLUMN_NAME+\'`=:\'+f.COLUMN_NAME;\n      }\n    }\n    if (fs.length>5) fs=fs.substr(5);\n    return fs;\n  },\n  \n  generateAdd: function(data,fields)\n  { var table = data.query.name.split(\'.\')[0];\n    var s = \'INSERT INTO `\'+table+\'` SET \';\n    s+=this.generateFields(table,fields);\n    data.query.text=s;\n  },\n\n  generateRead: function(data,fields)\n  { var table = data.query.name.split(\'.\')[0];\n    var s = \'SELECT * FROM `\'+table+\'` WHERE \';\n    s+=this.generateWhere(table,fields,true);\n    s+=\' LIMIT 1\';\n    data.query.text=s;\n  },\n  \n  generateWrite: function(data,fields)\n  { var table = data.query.name.split(\'.\')[0];\n    var s = \'UPDATE `\'+table+\'` SET \';\n    s+=this.generateFields(table,fields);\n    s+=\' WHERE \';\n    s+=this.generateWhere(table,fields,true);\n    s+=\' LIMIT 1\';\n    data.query.text=s;\n  },\n\n  generateList: function(data,fields)\n  { var table = data.query.name.split(\'.\')[0];\n    var s = \'SELECT * FROM `\'+table+\'` WHERE \';\n    s+=this.generateWhere(table,fields);\n    s+=\' ORDER by :order LIMIT :offset, :limit\';\n    data.query.text=s;\n  },\n  \n  generateRemove: function(data,fields)\n  { var table = data.query.name.split(\'.\')[0];\n    var s = \'DELETE FROM `\'+table+\'` WHERE \';\n    s+=this.generateWhere(table,fields,true);\n    s+=\' LIMIT 1\';\n    data.query.text=s;\n  },\n  \n  generateParameterData: function(queryText)\n  { var parameters = {};\n    parameters.type = \'string\';\n    parameters.validator = \'\';\n    var regex = new RegExp(\'[^:]:([a-z_0-9]+)\',\'gi\');\n    while (regMatch = regex.exec(queryText))\n    { if (parameters[\'default\'] === undefined) parameters[\'default\'] = [];\n      switch (regMatch[1])\n      { case \'id\': parameters[\'default\'].push(\'\'); break;\n        case \'order\': parameters[\'default\'].push(\'`id`\'); break;\n        case \'offset\': parameters[\'default\'].push(\'0\'); break;\n        case \'limit\': parameters[\'default\'].push(\'100000\'); break;\n        default: parameters[\'default\'].push(\'`\'+regMatch[1]+\'`\');\n      }\n      if (parameters.name === undefined) parameters.name = [];\n      parameters.name.push(regMatch[1]);\n    }\n    return parameters;\n  },\n  \n  read: function(id)\n  { var queries = [];\n    if (id) queries.push([\'query\',\'record\',\'queries.read\',{id:id}]);\n    if (id) queries.push([\'parameters\',\'records\',\'parameters.list\',{query_id:id}]);\n    return this.queries(queries);\n  },\n\n  write: function(data)\n  { if (!data.query.id)\n    { data.parameters = this.generateParameterData(data.query.text);\n      data = this.queries([\n        [\'insert_id\',\'value:insert_id\',\'queries.add\',data.query],\n        [\'add\',\'success\',\'parameters.add\',data.parameters,{query_id:\'insert_id\'}]\n      ]);\n    }\n    else\n    { var queries = [];\n      queries.push([\'write\',\'success\',\'queries.write\',data.query]);\n      queries.push([\'parameters\',\'values\',\'parameters.list\',{query_id:data.query.id}]);\n      queries.push([\'remove2\',\'success\',\'parameters.remove\',false,{id:\'parameters\'}]);\n      if (data.parameters)\n      { data.parameters.query_id = data.query.id;\n        queries.push([\'add\',\'success\',\'parameters.add\',data.parameters]);\n      }\n      data = this.queries(queries);\n    }\n    return data;\n  },\n  \n  list: function(parameters)\n  { var table = false;\n    if (parameters.name) table = parameters.name.split(\'.\')[0];\n    var queries = [[\'queries\',\'list\',\'queries.list\',parameters]];\n    if (table) queries.push([\'tables\',\'values:TABLE_NAME\',\'inflector.tables\']);\n    var data = this.queries(queries);\n    data.crud = [];\n    if (table && data.tables.contains(table))\n    { var crud = [\'add\',\'read\',\'write\',\'remove\',\'list\'];\n      for (var i=0;i<crud.length;i++) \n      { var queryName = table+\'.\'+crud[i];\n        if (!Object.values(data.queries).contains(queryName)) data.crud.push(queryName);\n      }\n    }\n    return data;  \n  },\n  \n  remove: function(id)\n  { return this.queries([\n      [\'parameters\',\'values\',\'parameters.list\',{query_id:id}],\n      [\'remove2\',\'success\',\'parameters.remove\',false,{id:\'parameters\'}],\n      [\'remove\',\'success\',\'queries.remove\',{id:id}]\n    ]);\n  }\n\n});\n'),
(5,	'role',	'minjs.roles.role=new new Class(\n{ Extends: minjs.Model,\n\n  read: function(id)\n  { var queries = [];\n    if (id) queries.push([\'role\',\'record\',\'roles.read\',{id:id}]);\n    return this.queries(queries);\n  },\n\n  write: function(data)\n  { var queries = [];\n    if (!data.id)\n    { queries.push([\'insert_id\',\'value:insert_id\',\'roles.add\',data]);\n    }\n    else\n    { queries.push([\'write\',\'success\',\'roles.write\',data]);\n    }\n    return this.queries(queries);\n  },\n  \n  remove: function(id)\n  { var queries = [[\'remove\',\'success\',\'roles.remove\',{id:id}]];\n    return this.queries(queries);\n  },\n  \n  list: function()\n  { var queries = [[\'roles\',\'records\',\'roles.list\']];\n    return this.queries(queries);\n  }\n\n});\n'),
(6,	'roles_query',	'minjs.roles_queries.roles_query=new new Class(\n{ Extends: minjs.Model,\n\n  read: function(id)\n  { var queries = [];\n    // model read:\n    if (id) queries.push([\'roles_query\',\'record\',\'roles_queries.read\',{id:id}]);\n    // belongsTo relations: \n    queries.push([\'roles\',\'list\',\'roles.list\']);\n    queries.push([\'queries\',\'list\',\'queries.list\']);\n    // hasAndBelongsToMany relations: \n    // hasMany relations: \n    // return query results\n    return this.queries(queries);\n  },\n\n  write: function(data)\n  { var queries = [];\n    if (!data.roles_query.id)\n    { // model insert:\n      queries.push([\'roles_query.insert_id\',\'value:insert_id\',\'roles_queries.add\',data.roles_query]);\n      // hasAndBelongsToMany relations: \n      // hasMany relations: \n    }\n    else\n    { // model write:\n      queries.push([\'write\',\'success\',\'roles_queries.write\',data.roles_query]);\n      // hasAndBelongsToMany relations: \n      // hasMany relations: \n    }\n    // return query results\n    return this.queries(queries);\n  },\n  \n  remove: function(id)\n  { var queries = [];\n    // hasMany relations: \n    // hasAndBelongsToMany relations: \n    // model remove:\n    queries.push([\'roles_query.remove\',\'success\',\'roles_queries.remove\',{id:id}]);\n    // return query results\n    return this.queries(queries);\n  },\n  \n  list: function()\n  { var queries = [];\n    // model list:\n    queries.push([\'roles_queries\',\'records\',\'roles_queries.list\']);\n    // belongsTo relations: \n    queries.push([\'roles\',\'list\',\'roles.list\']);\n    queries.push([\'queries\',\'list\',\'queries.list\']);\n    // return query results\n    return this.queries(queries);\n  }\n\n});\n'),
(7,	'user',	'minjs.users.user=new new Class(\n{ Extends: minjs.Model,\n\n  read: function(id)\n  { var queries = [];\n    if (id) queries.push([\'user\',\'record\',\'users.read\',{id:id}]);\n    queries.push([\'groups\',\'list\',\'groups.list\']);\n    if (id) queries.push([\'user.role_id\',\'values:role_id\',\'users_roles.list\',{user_id:id}]);\n    queries.push([\'roles\',\'list\',\'roles.list\']);\n    return this.queries(queries);\n  },\n\n  write: function(data)\n  { var queries = [];\n    if (!data.user.id)\n    { queries.push([\'user_id\',\'value:insert_id\',\'users.add\',data.user]);\n      queries.push([\'set_password\',\'success\',\'users.write_password\',data.user,{id:\'user_id\'}]);\n      if (data.user.role_id) queries.push([\'add\',\'success\',\'users_roles.add\',{role_id:data.user.role_id},{user_id:\'user_id\'}]);\n    }\n    else\n    { queries.push([\'write\',\'success\',\'users.write_username\',data.user]);\n      if (data.user.password) queries.push([\'set_password\',\'success\',\'users.write_password\',data.user]);\n      if (data.user.role_id) \n      { queries.push([\'user_roles\',\'values\',\'users_roles.list\',{user_id:data.user.id}]);\n        queries.push([\'remove\',\'success\',\'users_roles.remove\',false,{id:\'user_roles\'}]);\n        queries.push([\'add\',\'success\',\'users_roles.add\',{role_id:data.user.role_id,user_id:data.user.id}]);\n      }\n    }\n    return this.queries(queries);\n  },\n  \n  list: function()\n  { var queries = [];\n    queries.push([\'users\',\'records\',\'users.list\']);\n    queries.push([\'groups\',\'list\',\'groups.list\']);\n    queries.push([\'roles\',\'list\',\'roles.list\']);\n    return this.queries(queries);\n  },\n  \n  remove: function(id)\n  { var queries = [];\n    queries.push([\'user_roles\',\'values\',\'users_roles.list\',{user_id:id}]);\n    queries.push([\'remove2\',\'success\',\'users_roles.remove\',false,{id:\'user_roles\'}]);\n    queries.push([\'remove\',\'success\',\'users.remove\',{id:id}]);\n    return this.queries(queries);\n  },\n\n  login: function(data)\n  { return this.query(\'value:id\',\'users.login\',data);\n  },\n  \n  password: function(data)\n  { var rows = this.query(\'value:affected_rows\',\'users.password\',data);\n    return rows?true:false;\n  }\n\n});\n'),
(19,	'controller',	'minjs.controllers.controller=new new Class(\n{ Extends: minjs.Model,\n  \n  list: function()\n  { var data = this.queries([\n      [\'controllers\',\'records\',\'controllers.list\'],\n      [\'tables\',\'values:TABLE_NAME\',\'inflector.tables\']\n    ]);\n    for (var i=0;i<data.tables.length;i++)\n    { data.tables[i]=data.tables[i];\n    }\n    for (i=0;i<data.controllers.length;i++)\n    { data.tables.erase(data.controllers[i].name);\n    }\n    return data;\n  },\n  \n  read: function(name)\n  { return {controller:this.query(\'record\',\'controllers.read\',{name:name})};\n  },\n  \n  remove: function(name)\n  { return this.query(\'success\',\'controllers.remove\',{name:name});\n  },\n  \n  write: function(data)\n  { if (data.id)\n    { var result = this.query(\'success\',\'controllers.write\',data);\n      if (minjs[data.name]) minjs[data.name] = undefined;\n      return result;\n    }\n    return this.query(\'success\',\'controllers.add\',data);\n  }\n  \n});\n'),
(20,	'model',	'minjs.models.model=new new Class(\n{ Extends: minjs.Model,\n  \n  list: function()\n  { var data = this.queries([\n      [\'models\',\'records\',\'models.list\'],\n      [\'tables\',\'values:TABLE_NAME\',\'inflector.tables\']\n    ]);\n    for (var i=0;i<data.tables.length;i++)\n    { data.tables[i]=data.tables[i].singularize();\n    }\n    for (i=0;i<data.models.length;i++)\n    { data.tables.erase(data.models[i].name);\n    }\n    return data;\n  },\n  \n  read: function(name)\n  { return {model:this.query(\'record\',\'models.read\',{name:name})};\n  },\n  \n  remove: function(name)\n  { return this.query(\'success\',\'models.remove\',{name:name});\n  },\n\n  write: function(data)\n  { if (data.id)\n    { var result = this.query(\'success\',\'models.write\',data);\n      var controller = data.name.pluralize();\n      if(minjs[controller] && minjs[controller][data.name])\n      { minjs[controller][data.name] = undefined;\n      }\n      return result;\n    } \n    return this.query(\'success\',\'models.add\',data);\n  }\n\n  \n});'),
(21,	'view',	'minjs.views.view=new new Class(\n{ Extends: minjs.Model,\n  \n  check: function()\n  { var queries = [];\n    queries.push([\'tables\',\'values:TABLE_NAME\',\'inflector.tables\']);\n    queries.push([\'controllers\',\'values:name\',\'controllers.list\']);\n    var data = this.queries(queries);\n    data.views = [\'skel\',\'layouts\'];\n    var t,table;\n    for (t=0;t<data.tables.length;t++)\n    { data.views.push(data.tables[t]);\n    }\n    for (t=0;t<data.controllers.length;t++)\n    { table = data.controllers[t];\n      if (!data.views.contains(table)) data.views.push(table);\n    }\n    for (t=0;t<data.views.length;t++)\n    { queries.push([data.views[t],\'values:name\',\'views.list\',{name:data.views[t]+\'/%\'}]);\n    }\n    var views = this.queries(queries);\n    for (t=0;t<data.views.length;t++)\n    { table = data.views[t];\n      var crud = [\'add\',\'edit\',\'show\',\'list\'];\n      var missing = [];\n      if (data.tables.contains(table))\n      { for (var i=0;i<crud.length;i++) \n        { if (!Object.contains(views[table], data.views[t]+\'/\'+crud[i])) missing.push(crud[i]);\n        }\n      }\n      data.views[t] = {name:data.views[t],count:Object.getLength(views[table]),missing:missing};\n    }\n    return data.views;\n  },\n  \n  list: function(controller)\n  { var queries = [];\n    queries.push([\'tables\',\'values:TABLE_NAME\',\'inflector.tables\']);\n    queries.push([\'views\',\'values:name\',\'views.list\',{name:controller+\'/%\'}]);\n    var data = this.queries(queries);\n    data.crud = [];\n    data.controller = controller;\n    if (data.tables.contains(controller))\n    { var crud = [\'add\',\'edit\',\'show\',\'list\'];\n      for (var i=0;i<crud.length;i++) \n      { if (!Object.values(data.views).contains(controller+\'/\'+crud[i])) data.crud.push(controller+\'/\'+crud[i]);\n      }\n    }\n    return data;\n  },\n  \n  read: function(name)\n  { return {view:this.query(\'record\',\'views.read\',{name:name})};\n  },\n  \n  remove: function(name)\n  { return this.query(\'success\',\'views.remove\',{name:name});\n  },\n  \n  write: function(data)\n  { if (data.id) \n    { result = this.query(\'success\',\'views.write\',data);\n      if (result) minjs.viewCache[data.name] = null;\n      return result;\n    }\n    return this.query(\'success\',\'views.add\',data);\n  }\n  \n});\n'),
(22,	'page',	'minjs.pages.page=new new Class(\n{ Extends: minjs.Model,\n\n  read: function(id)\n  { var queries = [];\n    // model read:\n    if (id) queries.push([\'page\',\'record\',\'pages.read\',{id:id}]);\n    // belongsTo relations: \n    // hasAndBelongsToMany relations: \n    // hasOne relations: \n    // hasMany relations: \n    // return query results\n    return this.queries(queries);\n  },\n\n  write: function(data)\n  { var queries = [];\n    if (!data.page.id)\n    { // model insert:\n      queries.push([\'page.insert_id\',\'value:insert_id\',\'pages.add\',data.page]);\n      // hasAndBelongsToMany relations: \n      // hasOne relations: \n      // hasMany relations: \n    }\n    else\n    { // model write:\n      queries.push([\'write\',\'success\',\'pages.write\',data.page]);\n      // hasAndBelongsToMany relations: \n      // hasOne relations: \n      // hasMany relations: \n    }\n    // return query results\n    return this.queries(queries);\n  },\n  \n  remove: function(id)\n  { var queries = [];\n    // hasMany relations: \n    // hasOne relations: \n    // hasAndBelongsToMany relations: \n    // model remove:\n    queries.push([\'page.remove\',\'success\',\'pages.remove\',{id:id}]);\n    // return query results\n    return this.queries(queries);\n  },\n  \n  list: function()\n  { var queries = [];\n    // model list:\n    queries.push([\'pages\',\'records\',\'pages.list\']);\n    // belongsTo relations: \n    // return query results\n    return this.queries(queries);\n  }\n\n});');

DROP TABLE IF EXISTS `pages`;
CREATE TABLE `pages` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '',
  `data` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `pages` (`id`, `name`, `data`) VALUES
(1,	'home',	'What is MinJS?\n--------------\n\n- DBMS Service: use it\'s API over the web as DB for your own application\n- QMVC framework: Query oriented MVC approach using synchronous javascript\n- Online IDE: super simple deployment and build in itself\n\nArchitecture\n------------\n\n- No speed limits: Unleash the raw speed of your web server!\n- Decentralized & Scalable: Business logic runs at the client, not centralized at the server side\n- Secure AAA: XSS-safe, CSRF-safe and built-in authentication and authorization mechanism\n- Multi-Tenant: Generates appropriate conditions to prevent data leaks between users and groups (tenants)\n- Point-in-Time: Authentication awareness enable audit logs on write transactions using history tables\n\nComponents\n----------\n\n- minjs.html: HTML/CSS file that defines the layout of the application\n- minjs.php: PHP file that handles all requests on the server\n- minjs_settings.php: PHP file that contains the configuration of the application\n- minjs_deployer.php: PHP file that helps to install and configure the application (temporary)\n- minjs.sql: SQL file that contains the initial state of the database (temporary)\n- lib: directory containing: Mootools, ACE editor, Markdown/Showdown\n'),
(2,	'todo',	'TODO\n====\n\n- Add other tables to second ERD in documentation\n- Fix pagination (not generated and queries not working in chrome)\n- Move conventionist, historian to minjs itself\n- Add stylesheets entity to database containing a record for each layout (same name policy)\n- field (in)validation is broken\n- I18n support (PO files) rewrite strings.js\n- TDD entity with test runner\n- ACE syntax checker for ejs\n- write good generated API doc page in backend (improved queries.list?)\n- create blog/cms demo with showdown (and highlight.js?)'),
(3,	'getting_started',	'Getting started\n===============\n\nRequirements\n------------\n\nWelcome to the getting started guide of MinJS. This guide is for anyone who wants to start working with MinJS. MinJS a framework built upon and in the popular browser-based JavaScript language. For optimal understanding of MinJS we advise to read the following (free) websites about the JavaScript language:\n\n   + Eloquent JavaScript\n   + Sams Teach Yourself JavaScript in 24 Hours\n   + W3Schools JavaScript Tutorial\n\nMinJS is a framework for building web applications and it runs in your web browser. To build your own web application using MinJS you need the following things:\n\n   + A Linux web hosting account with (S)FTP access\n   + A working installation of PHP5 and MySQL5 on that account\n   + A recent browser with developer tools (Firefox/Firebug, IE8+ or Chrome)\n\nDefinition\n----------\n\nMinJS is a web application development framework written in JavaScript and PHP. It tries to simplify web application development by providing you a basic application with the most common functionality as a starting point. \n\nMinJS is opinionated software just like Rails[1]. MinJS dictates a very structured way of building web applications. If you educate yourself in its believes and methods, you will not see them as restrictions on your development freedom, but as restrictions on your development mistakes.\n\n[1] http://guides.rubyonrails.org/getting_started.html\n\nMVC Architecture\n----------------\n\nMinJS is based upon the Model, View, Controller (MVC) architecture. In MVC database access, business logic and user interface are seperates into 3 layers. By dictating what code should go where you gain faster development and easier maintenance.\n\n2.1.1 Models\n\nA model represents the information (data) of the application and the rules to manipulate that data. In the case of |Rails|MinJS|, models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application’s business logic will be concentrated in the models.\n\n2.1.2 Views\n\nViews represent the user interface of your application. In |Rails|MinJS|, views are often HTML files with embedded |Ruby|JavaScript| code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.\n\n2.1.3 Controllers\n\nControllers provide the “glue” between models and views. In |Rails|MinJS|, controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation.\n\n3 The MinJS philosophy\n\nThe following 3 principles are the main guidelines for the MinJS framework\n\n- Dictate a technology stack choice to gain raw speed. MinJS is designed to run on a LAMP server (Linux Apache MySQL PHP). This should not cause you any problem since this is the most popular stack for web applications.\n\n- Prefer \"Convention Over Configuration\". This means that it\'s better to make assumptions about what you want to do and how you’re going to do it, than to require you to specify every little thing through endless configuration files.\n\n- Administrative web applications should be built using the MVC architecture in a \"just follow the recipe\" or \"cook book\" style of programming. You should not (need to) write \"smart\" code, so \"keep it simple\" and use the generators.\n\n- \"Ready to scale\": Decentralize as much as possible and keep your application stateless to ensure painless scaling on a simple web farm with a single database, multiple webservers and round robin DNS.\n\n3.1 No Rails clone\n\nMinJS has a lot in common with other MVC frameworks like Rails, but it also has fundamental differences. Important differences are running the MVC client side and forcing you to expose a (SQL) Query API. This allows the framework to use the popular and upcomming JavaScript language.\n\n3.2 Web based, no CLI\n\nWhile most other MVC frameworks offer command line tools for code generation, MinJS is web based. This enables you to build applications anywhere. Note: the application builder is built in itself and is also the start of your project.\n\n3.3 MVC and the Query API\n\nThe biggest difference with most other frameworks is that MinJS follows a very data-centric approach. This is clearly visible in how the MVC Model layer interacts with the database. MinJS does not use an Object Relational Mapping (ORM) system, like other MVC frameworks, but requires the developer to generate (or write) queries (in SQL). This gives more power and control to the developer.\n\nMinJS exposes these queries through an API, the Query API. This means it does not support a REST API, because it is not applicable to queries (it requires a server side ORM). Using the authentication and authorization model you can choose which queries can be seen and executed by who. This differs from other MVC frameworks where authorization is checked in Controller methods and not before executing queries. \n\nThe Model is, just like the Controller and the Views, written in JavaScript and is running client side. This Model calls the Query API for its data manipulation needs. Executing queries is done by sending a POST request with query names and query parameters as JSON data to the Query API. This way MinJS forces you to build your application on top your own Query oriented API.\n\nApart from the Query API and its authentication and authorization everything is running client side and is therefor untrusted. This makes that MinJS fully depends on DBMS features like \"transaction support\" and \"database constraints\" to ensure data consistency and integrity. For this purpose the Query API also provides server side parameter validators.\n\n4 The Query API\n\nminjs.query(2,3,4);\n\nExecute a single query identified by name with given parameters and return the result in the requested type containing the requested fields.\n\nminjs.queries([[1,2,3,4,5],...]);\n\nExecute a set of queries as a transaction where query results may be used as (path) parameters in successive queries in the transaction. The parameters in the minjs query and queries commands are:\n\n   1 result path\n Choose a key where the result of this query are stored in thre returned results object.\n   2 result type:field1,field2,...\n Choose the type and the fields of the returned results. All types and their default field selections are shown below.\n - records\n   An array (rowset) of objects (rows) containing name-value pairs (field name and value)\n - record\n   A single object (row) containing name-value pairs (field name and value)\n - list:id,name\n   A single object (lookup table) containing name-value pairs (field1 value and field2 value)\n - values:id\n   An array (list) containing values (from field1)\n - value:id\n   A single value (from field1)\n - success\n   true or false\n   3 query name\n Choose a query that you want to execute.\n   4 query parameters\n The parameters object contains name-value pairs for the parameters of the query.\n   5 path parameters\n If the parameters are the result a previous query, their path must be given as value in this parameters object. Note: INSERT UPDATE and DELETE queries return a record containing the numeric fields \"insert_id\" and \"affected_rows\".\n\nSee the demo for more\n'),
(4,	'erd',	'Entity Relationship Diagram\n===========================\n\nThe Query API uses the following tables and relations:\n\n<pre>\n    DIAGRAM           TABLES           FIELDS (i:integer, v:varchar, t:text, dt:datetime, pk:primary key, fk:foreign key)\n-------------------------------------------------------------------------------------------------------------------------\n    [Groups]          groups           id(pk):i, name:v\n       |1\n    hasMany\n       |n\n    [Users]           users            id(pk):i, username:v, password:v, group_id(fk):i, session_id:v, session_updated:dt\n       |n\nhasAndBelongsToMany   users_roles      id(pk):i, group_id(fk):i, user_id(fk):i, role_id(fk):i\n       |m\n    [Roles]           roles            id(pk):i, name:v\n       |n\nhasAndBelongsToMany   roles_actions    id(pk):i, role_id(fk):i, query_id(fk):i\n       |m\n    [Queries]         queries          id(pk):i, name:v, text:t, documentation:t\n       |1\n    hasMany\n       |n\n  [Parameters]        parameters       id(pk):i, query_id(fk):i, name:v, type:v, validator:t, default:v\n</pre>\n'),
(5,	'install',	'Installation\n============\n\nInstalling MinJS\n\nDebugging\n---------\n\nAdd the following lines to a \".htaccess\" file:\n\n    php_flag display_startup_errors on\n    php_flag display_errors on\n');

DROP TABLE IF EXISTS `parameters`;
CREATE TABLE `parameters` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `query_id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `type` varchar(20) NOT NULL DEFAULT 'string',
  `validator` text NOT NULL,
  `default` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `query_id` (`query_id`),
  CONSTRAINT `parameters_ibfk_8` FOREIGN KEY (`query_id`) REFERENCES `queries` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `parameters` (`id`, `query_id`, `name`, `type`, `validator`, `default`) VALUES
(3,	3,	'old_password',	'string',	'',	''),
(4,	3,	'new_password',	'string',	'strlen($value)>=4',	''),
(5,	5,	'table_name',	'string',	'',	'\'%\''),
(6,	5,	'constraint_name',	'string',	'',	'\'%\''),
(7,	5,	'constraint_type',	'string',	'',	'\'%\''),
(8,	6,	'table_name',	'string',	'',	'\'%\''),
(9,	6,	'referenced_table_name',	'string',	'',	'\'%\''),
(10,	7,	'table_name',	'string',	'',	'\'%\''),
(11,	8,	'table_name',	'string',	'',	'\'%\''),
(12,	8,	'column_name',	'string',	'',	'\'%\''),
(17,	11,	'name',	'string',	'',	''),
(20,	13,	'name',	'string',	'',	''),
(24,	17,	'name',	'string',	'',	''),
(25,	18,	'name',	'string',	'',	'\'%\''),
(26,	19,	'name',	'string',	'',	''),
(29,	21,	'name',	'string',	'',	''),
(30,	23,	'name',	'string',	'',	''),
(31,	23,	'text',	'string',	'',	''),
(32,	23,	'documentation',	'string',	'',	''),
(33,	24,	'query_id',	'string',	'',	''),
(34,	24,	'name',	'string',	'',	''),
(35,	24,	'type',	'string',	'',	''),
(36,	24,	'validator',	'string',	'',	''),
(37,	24,	'default',	'string',	'',	''),
(41,	27,	'id',	'string',	'',	''),
(42,	28,	'name',	'string',	'',	'`name`'),
(43,	28,	'id',	'string',	'',	''),
(44,	29,	'id',	'string',	'',	''),
(45,	30,	'name',	'string',	'',	'`name`'),
(46,	30,	'order',	'string',	'',	'`id`'),
(47,	30,	'offset',	'string',	'',	'0'),
(48,	30,	'limit',	'string',	'',	'100000'),
(49,	31,	'name',	'string',	'',	'`name`'),
(50,	31,	'data',	'string',	'',	'`data`'),
(51,	32,	'id',	'string',	'',	''),
(52,	33,	'query_id',	'string',	'',	'`query_id`'),
(53,	33,	'name',	'string',	'',	'`name`'),
(54,	33,	'type',	'string',	'',	'`type`'),
(55,	33,	'validator',	'string',	'',	'`validator`'),
(56,	33,	'default',	'string',	'',	'`default`'),
(57,	33,	'id',	'string',	'',	''),
(58,	34,	'id',	'string',	'',	''),
(59,	35,	'query_id',	'string',	'',	'`query_id`'),
(60,	35,	'name',	'string',	'',	'`name`'),
(61,	35,	'type',	'string',	'',	'`type`'),
(62,	35,	'validator',	'string',	'',	'`validator`'),
(63,	35,	'default',	'string',	'',	'`default`'),
(64,	35,	'order',	'string',	'',	'`id`'),
(65,	35,	'offset',	'string',	'',	'0'),
(66,	35,	'limit',	'string',	'',	'100000'),
(67,	36,	'id',	'string',	'',	''),
(68,	37,	'name',	'string',	'',	'`name`'),
(69,	37,	'text',	'string',	'',	'`text`'),
(70,	37,	'documentation',	'string',	'',	'`documentation`'),
(71,	37,	'id',	'string',	'',	''),
(72,	38,	'id',	'string',	'',	''),
(73,	39,	'name',	'string',	'',	'`name`'),
(74,	40,	'id',	'string',	'',	''),
(75,	41,	'name',	'string',	'',	'`name`'),
(76,	41,	'id',	'string',	'',	''),
(77,	42,	'id',	'string',	'',	''),
(78,	43,	'name',	'string',	'',	'`name`'),
(79,	43,	'order',	'string',	'',	'`id`'),
(80,	43,	'offset',	'string',	'',	'0'),
(81,	43,	'limit',	'string',	'',	'100000'),
(82,	44,	'role_id',	'string',	'',	'`role_id`'),
(83,	44,	'query_id',	'string',	'',	'`query_id`'),
(84,	45,	'id',	'string',	'',	''),
(85,	46,	'role_id',	'string',	'',	'`role_id`'),
(86,	46,	'query_id',	'string',	'',	'`query_id`'),
(87,	46,	'id',	'string',	'',	''),
(88,	47,	'id',	'string',	'',	''),
(89,	48,	'role_id',	'string',	'',	'`role_id`'),
(90,	48,	'query_id',	'string',	'',	'`query_id`'),
(91,	48,	'order',	'string',	'',	'`id`'),
(92,	48,	'offset',	'string',	'',	'0'),
(93,	48,	'limit',	'string',	'',	'100000'),
(94,	49,	'key',	'string',	'',	'`key`'),
(95,	49,	'created',	'string',	'',	'`created`'),
(96,	49,	'updated',	'string',	'',	'`updated`'),
(97,	50,	'id',	'string',	'',	''),
(98,	51,	'key',	'string',	'',	'`key`'),
(99,	51,	'created',	'string',	'',	'`created`'),
(100,	51,	'updated',	'string',	'',	'`updated`'),
(101,	51,	'id',	'string',	'',	''),
(102,	52,	'id',	'string',	'',	''),
(103,	53,	'key',	'string',	'',	'`key`'),
(104,	53,	'created',	'string',	'',	'`created`'),
(105,	53,	'updated',	'string',	'',	'`updated`'),
(106,	53,	'order',	'string',	'',	'`id`'),
(107,	53,	'offset',	'string',	'',	'0'),
(108,	53,	'limit',	'string',	'',	'100000'),
(109,	54,	'username',	'string',	'',	'`username`'),
(110,	54,	'password',	'string',	'',	'`password`'),
(111,	55,	'id',	'string',	'',	''),
(112,	56,	'username',	'string',	'',	'`username`'),
(113,	56,	'id',	'string',	'',	''),
(114,	65,	'password',	'string',	'',	'`password`'),
(115,	65,	'id',	'string',	'',	''),
(116,	58,	'username',	'string',	'',	'`username`'),
(117,	58,	'password',	'string',	'',	'`password`'),
(118,	58,	'order',	'string',	'',	'`id`'),
(119,	58,	'offset',	'string',	'',	'0'),
(120,	58,	'limit',	'string',	'',	'100000'),
(121,	59,	'user_id',	'string',	'',	'`user_id`'),
(122,	59,	'role_id',	'string',	'',	'`role_id`'),
(123,	60,	'id',	'string',	'',	''),
(124,	61,	'user_id',	'string',	'',	'`user_id`'),
(125,	61,	'role_id',	'string',	'',	'`role_id`'),
(126,	61,	'id',	'string',	'',	''),
(127,	62,	'id',	'string',	'',	''),
(128,	63,	'user_id',	'string',	'',	'`user_id`'),
(129,	63,	'role_id',	'string',	'',	'`role_id`'),
(130,	63,	'order',	'string',	'',	'`id`'),
(131,	63,	'offset',	'string',	'',	'0'),
(132,	63,	'limit',	'string',	'',	'100000'),
(133,	64,	'name',	'string',	'',	'`name`'),
(134,	64,	'html',	'string',	'',	'`html`'),
(135,	57,	'id',	'string',	'',	''),
(162,	76,	'name',	'string',	'',	'`name`'),
(163,	76,	'data',	'string',	'',	'`data`'),
(164,	76,	'id',	'string',	'',	''),
(172,	15,	'name',	'string',	'',	''),
(174,	2,	'username',	'string',	'strlen($value)>0',	''),
(175,	2,	'password',	'string',	'strlen($value)>0',	''),
(176,	75,	'name',	'string',	'',	'`name`'),
(177,	75,	'data',	'string',	'',	'`data`'),
(178,	75,	'id',	'string',	'',	''),
(179,	25,	'name',	'string',	'',	'`name`'),
(180,	25,	'data',	'string',	'',	'`data`'),
(181,	26,	'name',	'string',	'',	'`name`'),
(182,	78,	'name',	'string',	'',	'`name`'),
(183,	78,	'data',	'string',	'',	'`data`'),
(185,	80,	'name',	'string',	'',	'`name`'),
(186,	80,	'data',	'string',	'',	'`data`'),
(187,	80,	'id',	'string',	'',	''),
(188,	81,	'id',	'string',	'',	''),
(189,	82,	'name',	'string',	'',	'`name`'),
(190,	82,	'data',	'string',	'',	'`data`'),
(191,	82,	'order',	'string',	'',	'`id`'),
(192,	82,	'offset',	'string',	'',	'0'),
(193,	82,	'limit',	'string',	'',	'100000'),
(195,	79,	'id',	'string',	'',	''),
(196,	83,	'name',	'string',	'',	'`name`'),
(197,	9,	'name',	'string',	'',	'\'%\''),
(198,	9,	'order',	'column',	'',	'`id`'),
(199,	9,	'offset',	'int',	'',	'0'),
(200,	9,	'limit',	'int',	'',	'100000'),
(213,	64,	'css',	'string',	'',	'`css`'),
(215,	77,	'name',	'string',	'',	'`name`'),
(216,	77,	'html',	'string',	'',	'`html`'),
(217,	77,	'id',	'string',	'',	''),
(218,	77,	'css',	'string',	'',	'`css`');

DROP TABLE IF EXISTS `queries`;
CREATE TABLE `queries` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '',
  `text` text NOT NULL,
  `documentation` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `queries` (`id`, `name`, `text`, `documentation`) VALUES
(1,	'any',	'',	''),
(2,	'users.login',	'SELECT * FROM users where username=:username and password=sha1(concat(::secret,salt,:password))',	'Logs a user in. Try admin/admin as valid username/password combination.'),
(3,	'users.password',	'UPDATE users SET password=sha1(concat(::secret,salt,:new_password)) WHERE id=::user_id AND password=sha1(concat(::secret,salt,:old_password))',	'Change user password.'),
(4,	'users.whoami',	'SELECT id as user_id, username, group_id from users where id=::user_id',	'Check for valid session'),
(5,	'inflector.constraints',	'SELECT * FROM information_schema.table_constraints WHERE table_schema=DATABASE() and table_name LIKE :table_name and constraint_name LIKE :constraint_name and constraint_type LIKE :constraint_type',	''),
(6,	'inflector.relations',	'SELECT * FROM information_schema.key_column_usage WHERE table_schema=DATABASE() and referenced_table_name is not null and table_name LIKE :table_name and referenced_table_name LIKE :referenced_table_name',	''),
(7,	'inflector.tables',	'SELECT * FROM information_schema.tables WHERE table_schema=DATABASE() and table_name LIKE :table_name',	''),
(8,	'inflector.fields',	'SELECT * FROM information_schema.columns WHERE table_schema=DATABASE() and table_name LIKE :table_name and column_name like :column_name',	''),
(9,	'queries.list',	'select * from queries where `name` LIKE :name ORDER by :order limit :offset,:limit',	''),
(10,	'models.list',	'select * from models',	''),
(11,	'models.read',	'select * from models where name = :name',	''),
(13,	'models.remove',	'delete from models where name = :name',	''),
(14,	'controllers.list',	'select * from controllers',	''),
(15,	'controllers.read',	'select * from controllers where name = :name',	''),
(17,	'controllers.remove',	'delete from controllers where name = :name',	''),
(18,	'views.list',	'select * from views where name like :name',	''),
(19,	'views.read',	'select * from views where name = :name',	''),
(21,	'views.remove',	'delete from views where name = :name',	''),
(23,	'queries.add',	'insert into `queries` SET `name`=:name, `text`=:text, `documentation`=:documentation',	''),
(24,	'parameters.add',	'insert into `parameters` SET `query_id`=:query_id, `name`=:name, `type`=:type, `validator`=:validator, `default`=:default',	''),
(25,	'controllers.add',	'INSERT INTO `controllers` SET `name`=:name, `data`=:data',	'Generated add query'),
(26,	'groups.add',	'INSERT INTO `groups` SET `name`=:name',	'Generated add query'),
(27,	'groups.read',	'SELECT * FROM `groups` WHERE `id`=:id LIMIT 1',	'Generated read query'),
(28,	'groups.write',	'UPDATE `groups` SET `name`=:name WHERE `id`=:id LIMIT 1',	'Generated write query'),
(29,	'groups.remove',	'DELETE FROM `groups` WHERE `id`=:id LIMIT 1',	'Generated remove query'),
(30,	'groups.list',	'SELECT * FROM `groups` WHERE `name`=:name ORDER by :order LIMIT :offset, :limit',	'Generated list query'),
(31,	'models.add',	'INSERT INTO `models` SET `name`=:name, `data`=:data',	'Generated add query'),
(32,	'parameters.read',	'SELECT * FROM `parameters` WHERE `id`=:id LIMIT 1',	'Generated read query'),
(33,	'parameters.write',	'UPDATE `parameters` SET `query_id`=:query_id, `name`=:name, `type`=:type, `validator`=:validator, `default`=:default WHERE `id`=:id LIMIT 1',	'Generated write query'),
(34,	'parameters.remove',	'DELETE FROM `parameters` WHERE `id`=:id LIMIT 1',	'Generated remove query'),
(35,	'parameters.list',	'SELECT * FROM `parameters` WHERE `query_id`=:query_id and `name`=:name and `type`=:type and `validator`=:validator and `default`=:default ORDER by :order LIMIT :offset, :limit',	'Generated list query'),
(36,	'queries.read',	'SELECT * FROM `queries` WHERE `id`=:id LIMIT 1',	'Generated read query'),
(37,	'queries.write',	'UPDATE `queries` SET `name`=:name, `text`=:text, `documentation`=:documentation WHERE `id`=:id LIMIT 1',	'Generated write query'),
(38,	'queries.remove',	'DELETE FROM `queries` WHERE `id`=:id LIMIT 1',	'Generated remove query'),
(39,	'roles.add',	'INSERT INTO `roles` SET `name`=:name',	'Generated add query'),
(40,	'roles.read',	'SELECT * FROM `roles` WHERE `id`=:id LIMIT 1',	'Generated read query'),
(41,	'roles.write',	'UPDATE `roles` SET `name`=:name WHERE `id`=:id LIMIT 1',	'Generated write query'),
(42,	'roles.remove',	'DELETE FROM `roles` WHERE `id`=:id LIMIT 1',	'Generated remove query'),
(43,	'roles.list',	'SELECT * FROM `roles` WHERE `name`=:name ORDER by :order LIMIT :offset, :limit',	'Generated list query'),
(44,	'roles_queries.add',	'INSERT INTO `roles_queries` SET `role_id`=:role_id, `query_id`=:query_id',	'Generated add query'),
(45,	'roles_queries.read',	'SELECT * FROM `roles_queries` WHERE `id`=:id LIMIT 1',	'Generated read query'),
(46,	'roles_queries.write',	'UPDATE `roles_queries` SET `role_id`=:role_id, `query_id`=:query_id WHERE `id`=:id LIMIT 1',	'Generated write query'),
(47,	'roles_queries.remove',	'DELETE FROM `roles_queries` WHERE `id`=:id LIMIT 1',	'Generated remove query'),
(48,	'roles_queries.list',	'SELECT * FROM `roles_queries` WHERE `role_id`=:role_id and `query_id`=:query_id ORDER by :order LIMIT :offset, :limit',	'Generated list query'),
(49,	'sessions.add',	'INSERT INTO `sessions` SET `key`=:key, `user_id`=::user_id, `created`=:created, `updated`=:updated',	'Generated add query'),
(50,	'sessions.read',	'SELECT * FROM `sessions` WHERE `id`=:id and `user_id`=::user_id LIMIT 1',	'Generated read query'),
(51,	'sessions.write',	'UPDATE `sessions` SET `key`=:key, `user_id`=::user_id, `created`=:created, `updated`=:updated WHERE `id`=:id and `user_id`=::user_id LIMIT 1',	'Generated write query'),
(52,	'sessions.remove',	'DELETE FROM `sessions` WHERE `id`=:id and `user_id`=::user_id LIMIT 1',	'Generated remove query'),
(53,	'sessions.list',	'SELECT * FROM `sessions` WHERE `key`=:key and `user_id`=::user_id and `created`=:created and `updated`=:updated ORDER by :order LIMIT :offset, :limit',	'Generated list query'),
(54,	'users.add',	'INSERT INTO `users` SET `username`=:username, `salt`=sha1(::random), `group_id`=::group_id',	'Improved add query'),
(55,	'users.read',	'SELECT `id`,`username`,`group_id` FROM `users` WHERE `id`=:id and `group_id`=::group_id LIMIT 1',	'Improved read query'),
(56,	'users.write_username',	'UPDATE `users` SET `username`=:username WHERE `id`=:id and `group_id`=::group_id LIMIT 1',	'Improved write query (username)'),
(57,	'users.remove',	'DELETE FROM `users` WHERE `id`=:id and `group_id`=::group_id LIMIT 1',	'Improved remove query'),
(58,	'users.list',	'SELECT `id`,`username`,`group_id` FROM `users` WHERE `username`=:username and `group_id`=::group_id ORDER by :order LIMIT :offset, :limit',	'Improved list query'),
(59,	'users_roles.add',	'INSERT INTO `users_roles` SET `group_id`=::group_id, `user_id`=:user_id, `role_id`=:role_id',	'Generated add query'),
(60,	'users_roles.read',	'SELECT * FROM `users_roles` WHERE `id`=:id and `group_id`=::group_id LIMIT 1',	'Generated read query'),
(61,	'users_roles.write',	'UPDATE `users_roles` SET `group_id`=::group_id, `user_id`=:user_id, `role_id`=:role_id WHERE `id`=:id and `group_id`=::group_id LIMIT 1',	'Generated write query'),
(62,	'users_roles.remove',	'DELETE FROM `users_roles` WHERE `id`=:id and `group_id`=::group_id LIMIT 1',	'Generated remove query'),
(63,	'users_roles.list',	'SELECT * FROM `users_roles` WHERE `group_id`=::group_id and `user_id`=:user_id and `role_id`=:role_id ORDER by :order LIMIT :offset, :limit',	'Generated list query'),
(64,	'views.add',	'INSERT INTO `views` SET `name`=:name, `html`=:html, `css`=:css',	'Generated add query'),
(65,	'users.write_password',	'UPDATE `users` SET `password`=sha1(concat(::secret,salt,:password)) WHERE `id`=:id and `group_id`=::group_id LIMIT 1',	'Improved write query (password)'),
(75,	'controllers.write',	'UPDATE `controllers` SET `name`=:name, `data`=:data WHERE `id`=:id LIMIT 1',	'Generated write query'),
(76,	'models.write',	'UPDATE `models` SET `name`=:name, `data`=:data WHERE `id`=:id LIMIT 1',	'Generated write query'),
(77,	'views.write',	'UPDATE `views` SET `name`=:name, `html`=:html, `css`=:css WHERE `id`=:id LIMIT 1',	'Generated write query'),
(78,	'pages.add',	'INSERT INTO `pages` SET `name`=:name, `data`=:data',	'Generated add query'),
(79,	'pages.read',	'SELECT * FROM `pages` WHERE `id`=:id LIMIT 1',	'Generated read query'),
(80,	'pages.write',	'UPDATE `pages` SET `name`=:name, `data`=:data WHERE `id`=:id LIMIT 1',	'Generated write query'),
(81,	'pages.remove',	'DELETE FROM `pages` WHERE `id`=:id LIMIT 1',	'Generated remove query'),
(82,	'pages.list',	'SELECT * FROM `pages` WHERE `name`=:name and `data`=:data ORDER by :order LIMIT :offset, :limit',	'Generated list query'),
(83,	'pages.find',	'select * from pages where `name` like :name limit 1',	'find page by name');

DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `roles` (`id`, `name`) VALUES
(1,	'any'),
(2,	'admins'),
(3,	'users');

DROP TABLE IF EXISTS `roles_queries`;
CREATE TABLE `roles_queries` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `role_id` int(11) NOT NULL DEFAULT '0',
  `query_id` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `role_id` (`role_id`),
  KEY `query_id` (`query_id`),
  CONSTRAINT `roles_queries_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`),
  CONSTRAINT `roles_queries_ibfk_2` FOREIGN KEY (`query_id`) REFERENCES `queries` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `roles_queries` (`id`, `role_id`, `query_id`) VALUES
(1,	1,	2),
(2,	1,	4),
(3,	2,	1),
(4,	1,	11),
(5,	1,	15),
(6,	1,	19),
(7,	1,	83),
(8,	1,	82);

DROP TABLE IF EXISTS `sessions`;
CREATE TABLE `sessions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `session_key` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `csrf_key` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `created` datetime NOT NULL,
  `updated` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `key` (`session_key`),
  CONSTRAINT `sessions_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `sessions` (`id`, `session_key`, `csrf_key`, `user_id`, `created`, `updated`) VALUES
(899,	'd6cb9b2d82327ba39f93081700922bc88496057b',	'eed96888ec179c9258f45329fd6858716743aee9',	NULL,	'2011-10-29 23:33:04',	'2011-10-29 23:33:04'),
(900,	'd46cbb6be0a0473029c8cd35db308e677e3ac692',	'ee03ff8d55981f12129cfc3929660455b089e44e',	NULL,	'2012-05-27 18:03:38',	'2012-05-27 18:03:38');

DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL DEFAULT '',
  `salt` varchar(255) NOT NULL DEFAULT '',
  `password` varchar(255) NOT NULL DEFAULT '',
  `group_id` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `group_id` (`group_id`),
  CONSTRAINT `users_ibfk_1` FOREIGN KEY (`group_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `users` (`id`, `username`, `salt`, `password`, `group_id`) VALUES
(1,	'admin',	'',	'3947cdf52a551de4983746545a1affdb2b04f4a2',	1),
(2,	'admin2',	'',	'7a6d844920208a1ca2fc8726a6cb2e1896f2679a',	2);

DROP TABLE IF EXISTS `users_roles`;
CREATE TABLE `users_roles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL DEFAULT '0',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `role_id` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `group_id` (`group_id`),
  KEY `user_id` (`user_id`),
  KEY `role_id` (`role_id`),
  CONSTRAINT `users_roles_ibfk_1` FOREIGN KEY (`group_id`) REFERENCES `groups` (`id`),
  CONSTRAINT `users_roles_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `users_roles_ibfk_3` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `users_roles` (`id`, `group_id`, `user_id`, `role_id`) VALUES
(2,	2,	2,	2),
(7,	1,	1,	2);

DROP TABLE IF EXISTS `views`;
CREATE TABLE `views` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '',
  `html` text NOT NULL,
  `css` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `views` (`id`, `name`, `html`, `css`) VALUES
(2,	'controllers/list',	'<h1>List Controllers</h1>\n<table>\n<tr><th>name</th><th>actions</th></tr>\n<% for(var i=0; i<controllers.length; i++) { %>\n<tr>\n<td><%= controllers[i].name %></td>\n<td><a href=\"#controllers.show({name:\'<%= controllers[i].name %>\'})\">show</a> <a href=\"#controllers.edit({name:\'<%= controllers[i].name %>\'})\">edit</a> <a href=\"#controllers.remove({name:\'<%= controllers[i].name %>\'})\">remove</a></td>\n</tr>\n<% } %>\n<% for(var i=0; i<tables.length; i++) { %>\n<tr>\n<td><%= tables[i] %></td>\n<td><a href=\"#controllers.add({name:\'<%= tables[i] %>\'})\">generate</a></td>\n</tr>\n<% } %>\n</table>\n',	''),
(3,	'controllers/show',	'<h1>Show Controller</h1>\n<div><strong><%= controller.name %> controller</strong></div>\n<pre><%= controller.data %></pre>\n',	''),
(4,	'models/edit',	'<h1>Edit Model</h1>\n<form>\n<input type=\"hidden\" name=\"id\" value=\"<%= model.id %>\"/>\n<input type=\"hidden\" name=\"name\" value=\"<%= model.name %>\"/>\n<div><strong><%= model.name %> model</strong></div>\n<textarea name=\"data\" class=\"javascript\"><%= model.data %></textarea><br/>\n<input type=\"submit\"/><br/>\n</form>\n',	''),
(5,	'models/list',	'<h1>List Models</h1>\n<table>\n<tr><th>name</th><th>actions</th></tr>\n<% for(var i=0; i<models.length; i++) { %>\n<tr>\n<td><%= models[i].name %></td>\n<td><a href=\"#models.show({name:\'<%= models[i].name %>\'})\">show</a> <a href=\"#models.edit({name:\'<%= models[i].name %>\'})\">edit</a> <a href=\"#models.remove({name:\'<%= models[i].name %>\'})\">remove</a></td>\n</tr>\n<% } %>\n<% for(var i=0; i<tables.length; i++) { %>\n<tr>\n<td><%= tables[i] %></td>\n<td><a href=\"#models.add({name:\'<%= tables[i] %>\'})\">generate</a></td>\n</tr>\n<% } %>\n</table>\n',	''),
(6,	'models/show',	'<h1>Show Model</h1>\n<div><strong><%= model.name %> model</strong></div>\n<pre><%= model.data %></pre>\n',	''),
(7,	'queries/add',	'<h1>Add Query</h1>\r\n<form>\r\n<label for=\"name\">name</label><br/>\r\n<input type=\"text\" name=\"query.name\" value=\"\"/><br/>\r\n<label for=\"text\">text</label><br/>\r\n<input type=\"text\" name=\"query.text\" value=\"\"/><br/>\r\n<label for=\"documentation\">documentation</label><br/>\r\n<input type=\"text\" name=\"query.documentation\" value=\"\"/><br/>\r\n<p>parameters</p>\r\n<table>\r\n  <tr>\r\n    <th>name</th>\r\n    <th>type</th>\r\n    <th>validator</th>\r\n    <th>default</th>\r\n    <th>actions</th>\r\n  </tr>\r\n<!-- new row starts here\r\n  <tr>\r\n    <td><input type=\"text\" name=\"parameters.name\" value=\"\"/></td>\r\n    <td>\r\n      <select name=\"parameters.type\">\r\n        <% var types = [\'string\',\'int\',\'column\']; for(var t=0;t<types.length;t++) { %>\r\n        <option value=\"<%= types[t] %>\"><%= types[t] %></option>\r\n        <% } %>\r\n      </select>\r\n    </td>\r\n    <td><input type=\"text\" name=\"parameters.validator\" value=\"\"/></td>\r\n    <td><input type=\"text\" name=\"parameters.default\" value=\"\"/></td>\r\n    <td><%= remove_table_row(\'remove\') %></td>\r\n  </tr>\r\nend of new row -->\r\n  <tr><td colspan=\"5\"><%= add_table_row(\'add\') %></td></tr>\r\n</table>\r\n<input type=\"submit\"/><br/>\r\n</form>\r\n',	''),
(8,	'queries/check',	'<h1>Check Queries</h1>\r\n<table>\r\n<tr><th>name</th><th>count</th><th>missing</th><th>actions</th></tr>\r\n<% for(var i=0; i<tables.length; i++) { var missing = tables[i].missing.length>0; %>\r\n<tr>\r\n<td><%= tables[i].name %></td>\r\n<td><%= tables[i].count %></td>\r\n<% if (missing) { %>\r\n  <td><%= tables[i].missing.join(\', \') %></td>\r\n<% } %>\r\n<% if (!missing) { %>\r\n  <td>-</td>\r\n<% } %>\r\n<td>\r\n  <a href=\"#queries.list({name:\'<%= tables[i].name %>.%\'})\">queries</a>\r\n<% if (missing) { %>\r\n  <a href=\"#queries.generate({name:\'<%= tables[i].name %>\'})\">generate</a>\r\n<% } %>\r\n</td>\r\n</tr>\r\n<% } %>\r\n</table>\r\n<a href=\"#queries.generate\">generate all missing queries</a><br/><br/>\r\n<a href=\"#queries.demo\">demo</a>\r\n',	''),
(9,	'queries/edit',	'<h1>Edit Query</h1>\r\n<form>\r\n<input type=\"hidden\" name=\"query.id\" value=\"<%= query.id %>\"/>\r\n<label for=\"query.name\">name</label><br/>\r\n<input type=\"text\" name=\"query.name\" value=\"<%= query.name %>\"/><br/>\r\n<label for=\"query.text\">text</label><br/>\r\n<input type=\"text\" name=\"query.text\" value=\"<%= query.text %>\"/><br/>\r\n<label for=\"query.documentation\">documentation</label><br/>\r\n<input type=\"text\" name=\"query.documentation\" value=\"<%= query.documentation %>\"/><br/>\r\n<label for=\"parameters.name\">parameters</label><br/>\r\n<table>\r\n  <tr>\r\n    <th>name</th>\r\n    <th>type</th>\r\n    <th>validator</th>\r\n    <th>default</th>\r\n    <th>actions</th>\r\n  </tr>\r\n<% for(var i=0;i<parameters.length;i++) { %>\r\n  <tr>\r\n    <td><input type=\"text\" name=\"parameters.name\" value=\"<%= parameters[i].name %>\"/></td>\r\n    <td>\r\n      <select name=\"parameters.type\">\r\n        <% var types = [\'string\',\'int\',\'column\']; for(var t=0;t<types.length;t++) { %>\r\n        <option value=\"<%= types[t] %>\"<%= types[t]==parameters[i].type?\' selected=\"selected\"\':\'\' %>><%= types[t] %></option>\r\n        <% } %>\r\n      </select>\r\n    </td>\r\n    <td><input type=\"text\" name=\"parameters.validator\" value=\"<%= parameters[i].validator %>\"/></td>\r\n    <td><input type=\"text\" name=\"parameters.default\" value=\"<%= parameters[i][\'default\'] %>\"/></td>\r\n    <td><%= remove_table_row(\'remove\') %></td>\r\n  </tr>\r\n<% } %>\r\n<!-- new row starts here\r\n  <tr>\r\n    <td><input type=\"text\" name=\"parameters.name\" value=\"\"/></td>\r\n    <td>\r\n      <select name=\"parameters.type\">\r\n        <% var types = [\'string\',\'int\',\'column\']; for(var t=0;t<types.length;t++) { %>\r\n        <option value=\"<%= types[t] %>\"><%= types[t] %></option>\r\n        <% } %>\r\n      </select>\r\n    </td>\r\n    <td><input type=\"text\" name=\"parameters.validator\" value=\"\"/></td>\r\n    <td><input type=\"text\" name=\"parameters.default\" value=\"\"/></td>\r\n    <td><%= remove_table_row(\'remove\') %></td>\r\n  </tr>\r\nend of new row -->\r\n  <tr><td colspan=\"5\"><%= add_table_row(\'add\') %></td></tr>\r\n</table>\r\n<input type=\"submit\"/><br/>\r\n</form>\r\n',	''),
(10,	'queries/list',	'<h1>List Queries</h1>\n<% if (parameters.name) { %><div>filtered on: <%= parameters.name %></div><% } %>\n<table>\n<tr><th><%= order_by(parameters,\'id\') %></th><th><%= order_by(parameters,\'name\') %></th><th>actions</th></tr>\n<% for(var id in queries) { if (id!=1) { %>\n<tr>\n<td><%= id %></td><td><%= queries[id] %></td>\n<td><a href=\"#queries.show({id:<%= id %>})\">show</a> <a href=\"#queries.edit({id:<%= id %>})\">edit</a> <a href=\"#queries.remove({id:<%= id %>})\">remove</a></td>\n</tr>\n<% } } %>\n<% if (crud) for(var i=0; i<crud.length; i++) { %>\n<tr>\n<td>-</td><td><%= crud[i] %></td>\n<td><a href=\"#queries.generate({name:\'<%= crud[i] %>\'})\">generate</a></td>\n</tr>\n<% } %>\n</table>\n<div><%= paging(parameters,Object.getLength(queries)) %></div>\n<a href=\"#queries.add\">add</a>\n',	''),
(11,	'queries/show',	'<h1>Show Query</h1>\n<table>\n<tr><th>id</th><td><%= query.id %></td></tr>\n<tr><th>name</th><td><%= query.name %></td></tr>\n<tr><th>text</th><td><%= query.text %></td></tr>\n<tr><th>documentation</th><td><%= query.documentation %></td></tr>\n<tr><th>parameters</th><td><table>\n  <tr>\n    <th>name</th>\n    <th>type</th>\n    <th>validator</th>\n    <th>default</th>\n  </tr>\n<% for(var i=0;i<parameters.length;i++) { %>\n  <tr>\n    <td><%= parameters[i].name %></td>\n    <td><%= parameters[i].type %></td>\n    <td><%= parameters[i].validator %></td>\n    <td><%= parameters[i].default %></td>\n  </tr>\n<% } %>\n</table></td></tr>\n</table>\n',	''),
(12,	'roles/add',	'<h1>Add Role</h1>\n<form>\n<label for=\"name\">name</label><br/>\n<input type=\"text\" name=\"name\" value=\"\"/><br/>\n<input type=\"submit\"/><br/>\n</form>\n',	''),
(13,	'roles/edit',	'<h1>Edit Role</h1>\n<form>\n<input type=\"hidden\" name=\"id\" value=\"<%= role.id %>\"/>\n<label for=\"name\">name</label><br/>\n<input type=\"text\" name=\"name\" value=\"<%= role.name %>\"/><br/>\n<input type=\"submit\"/><br/>\n</form>\n',	''),
(14,	'roles/list',	'<h1>List Roles</h1>\n<table>\n<tr><th>id</th><th>name</th></tr>\n<% for(var i=0; i<roles.length; i++) { if (roles[i].id!=1) { %>\n<tr>\n<td><%= roles[i].id %></td><td><%= roles[i].name %></td>\n<td><a href=\"#roles.show({id:<%= roles[i].id %>})\">show</a> <a href=\"#roles.edit({id:<%= roles[i].id %>})\">edit</a> <a href=\"#roles.remove({id:<%= roles[i].id %>})\">remove</a></td>\n</tr>\n<% } } %>\n</table>\n<a href=\"#roles.add\">add</a>\n',	''),
(15,	'roles/show',	'<h1>Show Role</h1>\n<table>\n<tr><th>id</th><td><%= role.id %></td></tr>\n<tr><th>name</th><td><%= role.name %></td></tr>\n</table>\n',	''),
(16,	'roles_queries/add',	'<h1>Add Permission</h1>\n<form>\n<label for=\"roles_query.role_id\">role_id</label><br/>\n<select name=\"roles_query.role_id\">\n<% for(var id in roles) { %>\n<option value=\"<%= id %>\"><%= roles[id] %></option>\n<% } %>\n</select><br/>\n<label for=\"roles_query.query_id\">query_id</label><br/>\n<select name=\"roles_query.query_id\">\n<% for(var id in queries) { %>\n<option value=\"<%= id %>\"><%= queries[id] %></option>\n<% } %>\n</select><br/>\n<input type=\"submit\"/><br/>\n</form>\n',	''),
(17,	'roles_queries/edit',	'<h1>Edit Permission</h1>\n<form>\n<input type=\"hidden\" name=\"id\" value=\"<%= roles_query.id %>\"/>\n<label for=\"roles_query.role_id\">role_id</label><br/>\n<select name=\"roles_query.role_id\">\n<% for(var id in roles) { %>\n<option value=\"<%= id %>\"<%= id==roles_query.role_id?\' selected=\"selected\"\':\'\' %>><%= roles[id] %></option>\n<% } %>\n</select><br/>\n<label for=\"roles_query.query_id\">query_id</label><br/>\n<select name=\"roles_query.query_id\">\n<% for(var id in queries) { %>\n<option value=\"<%= id %>\"<%= id==roles_query.query_id?\' selected=\"selected\"\':\'\' %>><%= queries[id] %></option>\n<% } %>\n</select><br/>\n<input type=\"submit\"/><br/>\n</form>\n',	''),
(18,	'roles_queries/list',	'<h1>List Permissions</h1>\n<table>\n<tr><th>id</th><th>role</th><th>query</th></tr>\n<% for(var i=0; i<roles_queries.length; i++) { %>\n<tr>\n<td><%= roles_queries[i].id %></td><td><%= roles[roles_queries[i].role_id] %></td><td><%= queries[roles_queries[i].query_id] %></td>\n<td><a href=\"#roles_queries.show({id:<%= roles_queries[i].id %>})\">show</a> <a href=\"#roles_queries.edit({id:<%= roles_queries[i].id %>})\">edit</a> <a href=\"#roles_queries.remove({id:<%= roles_queries[i].id %>})\">remove</a></td>\n</tr>\n<% } %>\n</table>\n<a href=\"#roles_queries.add\">add</a>\n',	''),
(19,	'roles_queries/show',	'<h1>Show Permission</h1>\n<table>\n<tr><th>id</th><td><%= roles_query.id %></td></tr>\n<tr><th>role_id</th><td><%= roles[roles_query.role_id] %></td></tr>\n<tr><th>query_id</th><td><%= queries[roles_query.query_id] %></td></tr>\n</table>\n',	''),
(20,	'users/add',	'<h1>Add User</h1>\n<form>\n<label for=\"user.username\">username</label><br/>\n<input type=\"text\" name=\"user.username\" value=\"\"/><br/>\n<label for=\"user.password\">password</label><br/>\n<input type=\"text\" name=\"user.password\" value=\"\"/><br/>\n<label for=\"user.group_id\">group_id</label><br/>\n<select name=\"user.group_id\">\n<% for(var id in groups) { %>\n<option value=\"<%= id %>\"><%= groups[id] %></option>\n<% } %>\n</select><br/>\n<label for=\"user.role_id\">role_id</label><br/>\n<select name=\"user.role_id\" multiple=\"multiple\">\n<% for(var id in roles) { if (id!=1) { %>\n<option value=\"<%= id %>\"><%= roles[id] %></option>\n<% }} %>\n</select><br/>\n<input type=\"submit\"/><br/>\n</form>\n',	''),
(21,	'users/edit',	'<h1>Edit User</h1>\n<form>\n<input type=\"hidden\" name=\"user.id\" value=\"<%= user.id %>\"/>\n<label for=\"user.username\">username</label><br/>\n<input type=\"text\" name=\"user.username\" value=\"<%= user.username %>\"/><br/>\n<label for=\"user.group_id\">group_id</label><br/>\n<select name=\"user.group_id\">\n<% for(var id in groups) { %>\n<option value=\"<%= id %>\"<%= id==user.group_id?\' selected=\"selected\"\':\'\' %>><%= groups[id] %></option>\n<% } %>\n</select><br/>\n<label for=\"user.role_id\">role_id</label><br/>\n<select name=\"user.role_id\" multiple=\"multiple\">\n<% for(var id in roles) { if (id!=1) { %>\n<option<%= (user.role_id.contains(id)?\' selected=\"selected\"\':\'\') %> value=\"<%= id %>\"><%= roles[id] %></option>\n<% }} %>\n</select><br/>\n<input type=\"submit\"/><br/>\n</form>\n',	''),
(23,	'users/list',	'<h1>List Users</h1>\n<table>\n<tr><th>id</th><th>username</th><th>group</th><th>actions</th></tr>\n<% for(var i=0; i<users.length; i++) { %>\n<tr>\n<td><%= users[i].id %></td><td><%= users[i].username %></td><td><%= groups[users[i].group_id] %></td>\n<td><a href=\"#users.show({id:<%= users[i].id %>})\">show</a> <a href=\"#users.edit({id:<%= users[i].id %>})\">edit</a> <a href=\"#users.remove({id:<%= users[i].id %>})\">remove</a></td>\n</tr>\n<% } %>\n</table>\n<a href=\"#users.add\">add</a>\n',	''),
(24,	'users/login',	'<h1>Login</h1>\n<form>\n<label for=\"username\">username</label>\n<input type=\"text\" name=\"username\" value=\"<%= username %>\"/><br/>\n<label for=\"password\">password</label>\n<input type=\"text\" name=\"password\" value=\"<%= password %>\"/><br/>\n<input type=\"submit\" value=\"Ok\"/>\n</form>',	''),
(25,	'users/password',	'<h1>Change Password</h1>\n<form>\n<label for=\"old_password\">old_password</label><br/>\n<input type=\"text\" name=\"old_password\" value=\"\"/><br/>\n<label for=\"new_password\">new_password</label><br/>\n<input type=\"text\" name=\"new_password\" value=\"\"/><br/>\n<input type=\"submit\"/><br/>\n</form>\n',	''),
(26,	'users/show',	'<h1>Show User</h1>\n<table>\n<tr><th>id</th><td><%= user.id %></td></tr>\n<tr><th>username</th><td><%= user.username %></td></tr>\n<tr><th>group_id</th><td><%= groups[user.group_id] %></td></tr>\n<tr><th>roles</th><td><ul>\n<% for(var id in roles) if (user.role_id.contains(id)) { %>\n<li><%= roles[id] %></li>\n<% } %>\n</ul></td></tr>\n</table>\n',	''),
(27,	'views/check',	'<h1>Check Views</h1>\n<table>\n<tr><th>name</th><th>count</th><th>missing</th><th>actions</th></tr>\n<% for(var i=0; i<tables.length; i++) { var missing = tables[i].missing.length>0; %>\n<tr>\n<td><%= tables[i].name %></td>\n<td><%= tables[i].count %></td>\n<% if (missing) { %>\n<td><%= tables[i].missing.join(\', \') %></td>\n<% } if (!missing) { %><td>-</td><% } %>\n<td>\n  <a href=\"#views.list({name:\'<%= tables[i].name %>\'})\">views</a>\n</td>\n</tr>\n<% } %>\n</table>\n',	''),
(29,	'views/list',	'<h1>List Views</h1>\n<table>\n<tr><th>name</th><th>actions</th></tr>\n<% for(var i=0; i<views.length; i++) { %>\n<tr>\n<td><%= views[i] %></td>\n<td><a href=\"#views.show({name:\'<%= views[i] %>\'})\">show</a> <a href=\"#views.edit({name:\'<%= views[i] %>\'})\">edit</a> <a href=\"#views.remove({name:\'<%= views[i] %>\'})\">remove</a></td>\n</tr>\n<% } %>\n<% for(var i=0; i<crud.length; i++) { %>\n<tr>\n<td><%= crud[i] %></td>\n<td><a href=\"#views.add({name:\'<%= crud[i] %>\'})\">generate</a></td>\n</tr>\n<% } %>\n</table>\n',	''),
(32,	'skel/controller',	'minjs.<%= controller %>=new new Class(\n{ Extends: minjs.Controller,\n  \n  add: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.<%= model %>.write(data))\n      { return this.error(\'<%= model %> could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'<%= model %> saved\');\n    }\n    else\n    { var data = this.<%= model %>.read();\n      this.render(\'<%= controller %>/add\',data);\n    }\n  },\n  \n  show: function(parameters,data)\n  { var data = this.<%= model %>.read(parameters.id);\n    this.render(\'<%= controller %>/show\',data);\n  },\n  \n  edit: function(parameters,data)\n  { if (data!==undefined)\n    { if (!this.<%= model %>.write(data))\n      { return this.error(\'<%= model %> could not be saved\');\n      }\n      minjs.go(\'browser.referrer\');\n      this.flash(\'success\',\'<%= model %> saved\');\n    }\n    else\n    { var data = this.<%= model %>.read(parameters.id);\n      this.render(\'<%= controller %>/edit\',data);\n    }\n  },\n  \n  remove: function(parameters,data)\n  { if (!this.<%= model %>.remove(parameters.id))\n    { return this.error(\'<%= model %> could not be removed\');\n    }\n    minjs.go(\'browser.referrer\');\n    this.flash(\'success\',\'<%= model %> removed\');\n  },\n  \n  list: function(parameters,data)\n  { var data = this.<%= model %>.list();\n    this.render(\'<%= controller %>/list\',data);\n  }\n\n});',	''),
(33,	'skel/model',	'minjs.<%= controller %>.<%= model %>=new new Class(\n{ Extends: minjs.Model,\n\n  read: function(id)\n  { var queries = [];\n    // model read:\n    if (id) queries.push([\'<%= model %>\',\'record\',\'<%= controller %>.read\',{id:id}]);\n    // belongsTo relations: <% for(var id in relations.belongsTo) { \n    var table = relations.belongsTo[id]; %>\n    queries.push([\'<%= table %>\',\'list\',\'<%= table %>.list\']);<% } %>\n    // hasAndBelongsToMany relations: <% for(var id in relations.hasAndBelongsToMany) { \n    var table = relations.hasAndBelongsToMany[id];\n    var column = table.singularize()+\'_id\'; %>\n    if (id) queries.push([\'<%= model %>.<%= column %>\',\'values:<%= column %>\',\'<%= id %>.list\',{<%= model %>_id:id}]);\n    queries.push([\'<%= table %>\',\'list\',\'<%= table %>.list\']);<% } %>\n    // hasOne relations: <% for(var id in relations.hasOne) { \n    var table = relations.hasOne[id]; \n    var model2 = table.singularize(); %>\n    if (id) queries.push([\'<%= model2 %>\',\'record\',\'<%= table %>.read\',{<%= model %>_id:id}]);<% } %>\n    // hasMany relations: <% for(var id in relations.hasMany) { \n    var table = relations.hasMany[id]; %>\n    if (id) queries.push([\'<%= table %>\',\'records\',\'<%= table %>.list\',{<%= model %>_id:id}]);<% } %>\n    // return query results\n    return this.queries(queries);\n  },\n\n  write: function(data)\n  { var queries = [];\n    if (!data.<%= model %>.id)\n    { // model insert:\n      queries.push([\'<%= model %>.insert_id\',\'value:insert_id\',\'<%= controller %>.add\',data.<%= model %>]);\n      // hasAndBelongsToMany relations: <% for(var id in relations.hasAndBelongsToMany) {\n      var table = relations.hasAndBelongsToMany[id];\n      var column = table.singularize()+\'_id\'; %>\n      if (data.<%= column %>) queries.push([\'<%= id %>.add\',\'success\',\'<%= id %>.add\',{<%= column %>:data.<%= model %>.<%= column %>},{<%= model %>_id:\'<%= model %>.insert_id\'}]);<% } %>\n      // hasOne relations: <% for(var id in relations.hasOne) { \n      var table = relations.hasOne[id];\n      var model2 = table.singularize(); %>\n      if (data.<%= model2 %>) queries.push([\'<%= model2 %>.insert_id\',\'value:insert_id\',\'<%= table %>.add\',data.<%= model2 %>,{<%= model %>_id:\'<%= model %>.insert_id\'}]);<% } %>\n      // hasMany relations: <% for(var id in relations.hasMany) { \n      var table = relations.hasMany[id]; %>\n      if (data.<%= table %>) queries.push([\'<%= table %>.add\',\'success\',\'<%= table %>.add\',data.<%= table %>,{<%= model %>_id:\'<%= model %>.insert_id\'}]);<% } %>\n    }\n    else\n    { // model write:\n      queries.push([\'write\',\'success\',\'<%= controller %>.write\',data.<%= model %>]);\n      // hasAndBelongsToMany relations: <% for(var id in relations.hasAndBelongsToMany) {\n      var table = relations.hasAndBelongsToMany[id];\n      var column = table.singularize()+\'_id\'; %>\n      if (data.<%= column %>)\n      { queries.push([\'<%= id %>.ids\',\'values\',\'<%= id %>.list\',{<%= model %>_id:data.<%= model %>.id}]);\n        queries.push([\'<%= id %>.remove\',\'success\',\'<%= id %>.remove\',false,{id:\'<%= id %>.ids\'}]);\n        queries.push([\'<%= id %>.add\',\'success\',\'<%= id %>.add\',{<%= column %>:data.<%= model %>.<%= column %>,<%= model %>_id:data.<%= model %>.id}]);\n      }<% } %>\n      // hasOne relations: <% for(var id in relations.hasOne) { \n      var table = relations.hasOne[id];\n      var model2 = table.singularize(); %>\n      if (data.<%= model2 %>)\n      { if (!data.<%= model2 %>.id)\n        { data.<%= model2 %>.<%= model %>_id = data.<%= model %>.id;\n          queries.push([\'<%= model2 %>.insert_id\',\'value:insert_id\',\'<%= table %>.add\',data.<%= model2 %>]);\n        }\n        else queries.push([\'write\',\'<%= model2 %>.success\',\'<%= table %>.write\',data.<%= model2 %>]);\n      }<% } %>\n      // hasMany relations: <% for(var id in relations.hasMany) { \n      var table = relations.hasMany[id]; %>\n      if (data.<%= table %>)\n      { data.<%= table %>.<%= model %>_id = data.<%= model %>.id;\n        queries.push([\'<%= table %>.ids\',\'values\',\'<%= table %>.list\',{<%= model %>_id:data.<%= model %>.id}]);\n        queries.push([\'<%= table %>.remove\',\'success\',\'<%= table %>.remove\',false,{id:\'<%= table %>.ids\'}]);\n        queries.push([\'<%= table %>.add\',\'success\',\'<%= table %>.add\',data.<%= table %>]);\n      }<% } %>\n    }\n    // return query results\n    return this.queries(queries);\n  },\n  \n  remove: function(id)\n  { var queries = [];\n    // hasMany relations: <% for(var id in relations.hasMany) { \n    var table = relations.hasMany[id]; %>\n    queries.push([\'<%= table %>.ids\',\'values\',\'<%= table %>.list\',{<%= model %>_id:id}]);\n    queries.push([\'<%= table %>.remove\',\'success\',\'<%= table %>.remove\',false,{id:\'<%= table %>.ids\'}]);<% } %>\n    // hasOne relations: <% for(var id in relations.hasOne) { \n    var table = relations.hasOne[id];\n    var model2 = table.singularize(); %>\n    queries.push([\'<%= model2 %>.id\',\'value\',\'<%= table %>.list\',{<%= model %>_id:id}]);\n    queries.push([\'<%= model2 %>.remove\',\'success\',\'<%= table %>.remove\',false,{id:\'<%= model2 %>.id\'}]);<% } %>\n    // hasAndBelongsToMany relations: <% for(var id in relations.hasAndBelongsToMany) {\n    var table = relations.hasAndBelongsToMany[id];\n    var column = table.singularize()+\'_id\'; %>\n    queries.push([\'<%= id %>.ids\',\'values\',\'<%= id %>.list\',{<%= model %>_id:id}]);\n    queries.push([\'<%= id %>.remove\',\'success\',\'<%= id %>.remove\',false,{id:\'<%= id %>.ids\'}]);<% } %>\n    // model remove:\n    queries.push([\'<%= model %>.remove\',\'success\',\'<%= controller %>.remove\',{id:id}]);\n    // return query results\n    return this.queries(queries);\n  },\n  \n  list: function()\n  { var queries = [];\n    // model list:\n    queries.push([\'<%= controller %>\',\'records\',\'<%= controller %>.list\']);\n    // belongsTo relations: <% for(var id in relations.belongsTo) { \n    var table = relations.belongsTo[id]; %>\n    queries.push([\'<%= table %>\',\'list\',\'<%= table %>.list\']);<% } %>\n    // return query results\n    return this.queries(queries);\n  }\n\n});',	''),
(34,	'skel/views/list',	'<h1>List <%=controller.humanize() %></h1>\n<table>\n<tr><% for(var i=0;i<fields[controller].length;i++) { var column = fields[controller][i].COLUMN_NAME; \nif (relations.belongsTo[column]) { var table = relations.belongsTo[column]; \n%><th><%= table.singularize() %></th><% } if (!relations.belongsTo[column]) {\n%><th><%= column %></th><% } } %></tr>\n<%% for(var i=0; i<<%= controller %>.length; i++) { %>\n<tr>\n<% for(var i=0;i<fields[controller].length;i++) { var column = fields[controller][i].COLUMN_NAME;\nif (relations.belongsTo[column]) { var table = relations.belongsTo[column]; \n%><td><%%= <%= table %>[<%= controller %>[i].<%= column %>] %></td><% } if (!relations.belongsTo[column]) { \n%><td><%%= <%= controller %>[i].<%= column %> %></td><% } } %>\n<td><a href=\"#<%= controller %>.show({id:<%%= <%= controller %>[i].id %>})\">show</a> <a href=\"#<%= controller %>.edit({id:<%%= <%= controller %>[i].id %>})\">edit</a> <a href=\"#<%= controller %>.remove({id:<%%= <%= controller %>[i].id %>})\">remove</a></td>\n</tr>\n<%% } %>\n</table>\n<a href=\"#<%= controller %>.add\">add</a>',	''),
(35,	'skel/views/add',	'<h1>Add <%=model.humanize() %></h1>\n<form>\n<% for(var i=0;i<fields[controller].length;i++) { var column = fields[controller][i].COLUMN_NAME; if (column!=\'id\') {\nif (relations.belongsTo[column]) { var table = relations.belongsTo[column]; \n%><label for=\"<%= model %>.<%= column %>\"><%= column %></label><br/>\n<select name=\"<%= model %>.<%= column %>\">\n<%% for(var id in <%= table %>) { %>\n<option value=\"<%%= id %>\"><%%= <%= table %>[id] %></option>\n<%% } %>\n</select><br/>\n<% } if (!relations.belongsTo[column]) { %><label for=\"<%= model %>.<%= column %>\"><%= column %></label><br/>\n<input type=\"text\" name=\"<%= model %>.<%= column %>\" value=\"<%= fields[controller][i].COLUMN_DEFAULT %>\"/><br/>\n<% } } for (var column in relations.hasAndBelongsToMany)\n{ var table = relations.hasAndBelongsToMany[column]; \n%><label for=\"<%= model %>.<%= column %>\"><%= column %></label><br/>\n<select name=\"<%= model %>.<%= column %>\" multiple=\"multiple\">\n<%% for(var id in <%= table %>) { %>\n<option value=\"<%%= id %>\"><%%= <%= table %>[id] %></option>\n<%% } %>\n</select><br/>\n<% }} %><input type=\"submit\"/><br/>\n</form>',	''),
(36,	'skel/views/edit',	'<h1>Edit <%=model.humanize() %></h1>\n<form>\n<% for(var i=0;i<fields[controller].length;i++) { var column = fields[controller][i].COLUMN_NAME; if (column==\'id\') { \n%><input type=\"hidden\" name=\"id\" value=\"<%%= <%= model %>.id %>\"/>\n<% } if (column!=\'id\') { if (relations.belongsTo[column]) { var table = relations.belongsTo[column]; \n%><label for=\"<%= model %>.<%= column %>\"><%= column %></label><br/>\n<select name=\"<%= model %>.<%= column %>\">\n<%% for(var id in <%= table %>) { %>\n<option value=\"<%%= id %>\"<%%= id==<%= model %>.<%= column %>?\' selected=\"selected\"\':\'\' %>><%%= <%= table %>[id] %></option>\n<%% } %>\n</select><br/>\n<% } if (!relations.belongsTo[column]) { %><label for=\"<%= model %>.<%= column %>\"><%= column %></label><br/>\n<input type=\"text\" name=\"<%= model %>.<%= column %>\" value=\"<%%= <%= model %>.<%= column %> %>\"/><br/>\n<% } } } for (var column in relations.hasAndBelongsToMany)\n{ var table = relations.hasAndBelongsToMany[column]; \n%><label for=\"<%= model %>.<%= column %>\"><%= column %></label><br/>\n<select name=\"<%= model %>.<%= column %>\" multiple=\"multiple\">\n<%% for(var id in <%= table %>) { %>\n<option<%%= (<%= model %>.<%= column %>.contains(id)?\' selected=\"selected\"\':\'\') %> value=\"<%%= id %>\"><%%= <%= table %>[id] %></option>\n<%% } %>\n</select><br/>\n<% } %><input type=\"submit\"/><br/>\n</form>',	''),
(37,	'skel/views/show',	'<h1>Show <%=model.humanize() %></h1>\n<table>\n<% for(var i=0;i<fields[controller].length;i++) { var column = fields[controller][i].COLUMN_NAME;\nif (relations.belongsTo[column]) { var table = relations.belongsTo[column]; \n%><tr><th><%= column %></th><td><%%= <%= table %>[<%= model %>.<%= column %>] %></td></tr>\n<% } if (!relations.belongsTo[column]) { \n%><tr><th><%= column %></th><td><%%= <%= model %>.<%= column %> %></td></tr>\n<% } } for (var column in relations.hasAndBelongsToMany)\n{ var table = relations.hasAndBelongsToMany[column]; \n%><tr><th><%= column %></th><td><%% for(var id in <%= table %>) if (<%= model %>.<%= column %>.contains(id)) { \n%><li><%%= <%= table %>[id] %></li><%% } %></ul></td></tr>\n<% } %></table>',	''),
(39,	'views/show',	'<h1>Show View</h1>\n<div><strong><%= view.name %> view</strong></div>\n<pre><%= view.html %></pre>\n<pre><%= view.css %></pre>\n',	''),
(44,	'layouts/default',	'<div id=\"navigation\">\n<br/>\n<a href=\"../\">MinJS.org</a><br/><br/>\n<strong>QMVC</strong><br/>\n- <a href=\"#queries.check\">queries</a><br/>\n- <a href=\"#models.list\">models</a><br/>\n- <a href=\"#controllers.list\">controllers</a><br/>\n- <a href=\"#views.check\">views</a><br/>\n<br/>\n<strong>Auth</strong><br/>\n- <a href=\"#roles.list\">roles</a><br/>\n- <a href=\"#roles_queries.list\">permissions</a><br/>\n- <a href=\"#users.list\">users</a><br/>\n- <a href=\"#users.logout\">logout</a><br/>\n<br/>\n<strong>Tools</strong><br/>\n- <%=link_to(\'conventionist\',\'tool/conventionist.php\') %><br/>\n- <%=link_to(\'historian\',\'tool/historian.php\') %><br/>\n<br/>\n<strong>CMS</strong><br/>\n- <a href=\"#pages.list\">pages</a><br/>\n<br/>\n<br/>\n</div>\n<div id=\"content\">\n<div id=\"page\">\n<div id=\"flash\"></div>\n<%=htmlDecode(content) %>\n</div>\n</div>',	'table tr td, table tr th { padding: 0.1em 1em 0.1em 0;}\ntable tr th { font-weight: bold; text-align: left;}\nstrong {font-weight: bold;}\nspan.error { font-weight: bold; color: red; display:inline; }\n#flash.error { padding: 0.25em; background-color: #faa; color: black; margin-bottom: 0.5em; }\n#flash.success { padding: 0.25em; background-color: #afa; color: black; margin-bottom: 0.5em; }\n#navigation { padding: .5em 1em; border-right: 2px solid silver; float: left;}\n#content #page { margin: 0.75em 1.5em; float: left; width: 600px;}\n#content #page h1 { font-size: 150%; margin: 0.5em 0 0.25em; }\n#content #page textarea { width:800px; height: 500px; }\n#content #page input[type=\"text\"] { width: 15em; }\n#content #page input[type=\"submit\"] { margin-bottom: .5em; margin-top: .5em; }\n#content #page label { display: inline-block; width: 7em; margin-bottom: .1em; margin-top: .5em; }\ndiv.editor { width:800px; height: 500px; border: 1px solid #999; font-size: 11px; line-height:14px; }\na { color: #00C;}\npre { margin: 0.5em 0; font-family: monospace; font-size: 11px; line-height:14px; }'),
(50,	'users/home',	'<h1>MinJS</h1>\n<p>Use the menu on the left to build your application.</p>\n<p><br/>Have fun with MinJS.</p>',	''),
(55,	'controllers/edit',	'<h1>Edit Controller</h1>\n<form>\n<input type=\"hidden\" name=\"id\" value=\"<%= controller.id %>\"/>\n<input type=\"hidden\" name=\"name\" value=\"<%= controller.name %>\"/>\n<div><strong><%= controller.name %> controller</strong></div>\n<textarea name=\"data\" class=\"javascript\"><%= controller.data %></textarea><br/>\n<input type=\"submit\"/><br/>\n</form>',	''),
(60,	'views/edit',	'<h1>Edit View</h1>\n<form>\n<input type=\"hidden\" name=\"id\" value=\"<%= view.id %>\"/>\n<input type=\"hidden\" name=\"name\" value=\"<%= view.name %>\"/>\n<div><strong><%= view.name %> model</strong></div>\n<textarea name=\"html\"><%= view.html %></textarea><br/>\n<textarea class=\"css\" name=\"css\"><%= view.css %></textarea><br/>\n<input type=\"submit\"/><br/>\n</form>',	''),
(61,	'pages/list',	'<h1>List Pages</h1>\n<table>\n<tr><th>id</th><th>name</th></tr>\n<% for(var i=0; i<pages.length; i++) { %>\n<tr>\n<td><%= pages[i].id %></td><td><%= pages[i].name %></td></td>\n<td><a href=\"#pages.show({id:<%= pages[i].id %>})\">show</a> <a href=\"#pages.edit({id:<%= pages[i].id %>})\">edit</a> <a href=\"#pages.remove({id:<%= pages[i].id %>})\">remove</a></td>\n</tr>\n<% } %>\n</table>\n<a href=\"#pages.add\">add</a>',	''),
(63,	'pages/edit',	'<h1>Edit Page</h1>\n<form>\n<input type=\"hidden\" name=\"page.id\" value=\"<%= page.id %>\"/>\n<input name=\"page.name\" value=\"<%= page.name %>\"/><br/>\n<textarea name=\"page.data\" class=\"markdown\"><%= page.data %></textarea><br/>\n<input type=\"submit\"/><br/>\n</form>',	''),
(64,	'pages/show',	'<h1>Show Page</h1>\n<div><strong><%= page.name %></strong></div>\n<pre><%= page.data %></pre>',	''),
(65,	'pages/add',	'<h1>Edit Page</h1>\n<form>\n<input name=\"page.name\" value=\"\"/><br/>\n<textarea name=\"page.data\" class=\"markdown\"></textarea><br/>\n<input type=\"submit\"/><br/>\n</form>',	''),
(66,	'queries/demo',	'<h1>Demo</h1>\n<form>\noutput<br/>\n<pre><%=query.output %></pre>\n<label for=\"query.input\">input</label><br/>\n<textarea name=\"query.input\"><%=query.input %></textarea><br/>\n<input type=\"submit\" value=\"execute\"/><br/>\n</form>',	'');

-- 2012-05-27 18:07:26
